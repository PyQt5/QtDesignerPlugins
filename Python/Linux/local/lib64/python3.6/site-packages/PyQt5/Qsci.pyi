# The PEP 484 type hints stub file for the Qsci module.
#
# Generated by SIP 5.3.0
#
# Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
# 
# This file is part of QScintilla.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


import typing
import sip

from PyQt5 import QtPrintSupport
from PyQt5 import QtWidgets
from PyQt5 import QtGui
from PyQt5 import QtCore

# Support for QDate, QDateTime and QTime.
import datetime

# Convenient type aliases.
PYQT_SIGNAL = typing.Union[QtCore.pyqtSignal, QtCore.pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., None], QtCore.pyqtBoundSignal]

# Convenient aliases for complicated OpenGL types.
PYQT_OPENGL_ARRAY = typing.Union[typing.Sequence[int], typing.Sequence[float],
        sip.Buffer, None]
PYQT_OPENGL_BOUND_ARRAY = typing.Union[typing.Sequence[int],
        typing.Sequence[float], sip.Buffer, int, None]


class QsciScintillaBase(QtWidgets.QAbstractScrollArea):

    SC_ORDER_PRESORTED = ... # type: int
    SC_ORDER_PERFORMSORT = ... # type: int
    SC_ORDER_CUSTOM = ... # type: int

    SC_AUTOMATICFOLD_SHOW = ... # type: int
    SC_AUTOMATICFOLD_CLICK = ... # type: int
    SC_AUTOMATICFOLD_CHANGE = ... # type: int

    SC_FOLDACTION_CONTRACT = ... # type: int
    SC_FOLDACTION_EXPAND = ... # type: int
    SC_FOLDACTION_TOGGLE = ... # type: int

    SC_FONT_SIZE_MULTIPLIER = ... # type: int

    SC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE = ... # type: int
    SC_CASEINSENSITIVEBEHAVIOUR_IGNORECASE = ... # type: int

    SC_TECHNOLOGY_DEFAULT = ... # type: int
    SC_TECHNOLOGY_DIRECTWRITE = ... # type: int
    SC_TECHNOLOGY_DIRECTWRITERETAIN = ... # type: int
    SC_TECHNOLOGY_DIRECTWRITEDC = ... # type: int

    SC_WEIGHT_NORMAL = ... # type: int
    SC_WEIGHT_SEMIBOLD = ... # type: int
    SC_WEIGHT_BOLD = ... # type: int

    SCLEX_CONTAINER = ... # type: int
    SCLEX_NULL = ... # type: int
    SCLEX_PYTHON = ... # type: int
    SCLEX_CPP = ... # type: int
    SCLEX_HTML = ... # type: int
    SCLEX_XML = ... # type: int
    SCLEX_PERL = ... # type: int
    SCLEX_SQL = ... # type: int
    SCLEX_VB = ... # type: int
    SCLEX_PROPERTIES = ... # type: int
    SCLEX_ERRORLIST = ... # type: int
    SCLEX_MAKEFILE = ... # type: int
    SCLEX_BATCH = ... # type: int
    SCLEX_LATEX = ... # type: int
    SCLEX_LUA = ... # type: int
    SCLEX_DIFF = ... # type: int
    SCLEX_CONF = ... # type: int
    SCLEX_PASCAL = ... # type: int
    SCLEX_AVE = ... # type: int
    SCLEX_ADA = ... # type: int
    SCLEX_LISP = ... # type: int
    SCLEX_RUBY = ... # type: int
    SCLEX_EIFFEL = ... # type: int
    SCLEX_EIFFELKW = ... # type: int
    SCLEX_TCL = ... # type: int
    SCLEX_NNCRONTAB = ... # type: int
    SCLEX_BULLANT = ... # type: int
    SCLEX_VBSCRIPT = ... # type: int
    SCLEX_ASP = ... # type: int
    SCLEX_PHP = ... # type: int
    SCLEX_BAAN = ... # type: int
    SCLEX_MATLAB = ... # type: int
    SCLEX_SCRIPTOL = ... # type: int
    SCLEX_ASM = ... # type: int
    SCLEX_CPPNOCASE = ... # type: int
    SCLEX_FORTRAN = ... # type: int
    SCLEX_F77 = ... # type: int
    SCLEX_CSS = ... # type: int
    SCLEX_POV = ... # type: int
    SCLEX_LOUT = ... # type: int
    SCLEX_ESCRIPT = ... # type: int
    SCLEX_PS = ... # type: int
    SCLEX_NSIS = ... # type: int
    SCLEX_MMIXAL = ... # type: int
    SCLEX_CLW = ... # type: int
    SCLEX_CLWNOCASE = ... # type: int
    SCLEX_LOT = ... # type: int
    SCLEX_YAML = ... # type: int
    SCLEX_TEX = ... # type: int
    SCLEX_METAPOST = ... # type: int
    SCLEX_POWERBASIC = ... # type: int
    SCLEX_FORTH = ... # type: int
    SCLEX_ERLANG = ... # type: int
    SCLEX_OCTAVE = ... # type: int
    SCLEX_MSSQL = ... # type: int
    SCLEX_VERILOG = ... # type: int
    SCLEX_KIX = ... # type: int
    SCLEX_GUI4CLI = ... # type: int
    SCLEX_SPECMAN = ... # type: int
    SCLEX_AU3 = ... # type: int
    SCLEX_APDL = ... # type: int
    SCLEX_BASH = ... # type: int
    SCLEX_ASN1 = ... # type: int
    SCLEX_VHDL = ... # type: int
    SCLEX_CAML = ... # type: int
    SCLEX_BLITZBASIC = ... # type: int
    SCLEX_PUREBASIC = ... # type: int
    SCLEX_HASKELL = ... # type: int
    SCLEX_PHPSCRIPT = ... # type: int
    SCLEX_TADS3 = ... # type: int
    SCLEX_REBOL = ... # type: int
    SCLEX_SMALLTALK = ... # type: int
    SCLEX_FLAGSHIP = ... # type: int
    SCLEX_CSOUND = ... # type: int
    SCLEX_FREEBASIC = ... # type: int
    SCLEX_INNOSETUP = ... # type: int
    SCLEX_OPAL = ... # type: int
    SCLEX_SPICE = ... # type: int
    SCLEX_D = ... # type: int
    SCLEX_CMAKE = ... # type: int
    SCLEX_GAP = ... # type: int
    SCLEX_PLM = ... # type: int
    SCLEX_PROGRESS = ... # type: int
    SCLEX_ABAQUS = ... # type: int
    SCLEX_ASYMPTOTE = ... # type: int
    SCLEX_R = ... # type: int
    SCLEX_MAGIK = ... # type: int
    SCLEX_POWERSHELL = ... # type: int
    SCLEX_MYSQL = ... # type: int
    SCLEX_PO = ... # type: int
    SCLEX_TAL = ... # type: int
    SCLEX_COBOL = ... # type: int
    SCLEX_TACL = ... # type: int
    SCLEX_SORCUS = ... # type: int
    SCLEX_POWERPRO = ... # type: int
    SCLEX_NIMROD = ... # type: int
    SCLEX_SML = ... # type: int
    SCLEX_MARKDOWN = ... # type: int
    SCLEX_TXT2TAGS = ... # type: int
    SCLEX_A68K = ... # type: int
    SCLEX_MODULA = ... # type: int
    SCLEX_COFFEESCRIPT = ... # type: int
    SCLEX_TCMD = ... # type: int
    SCLEX_AVS = ... # type: int
    SCLEX_ECL = ... # type: int
    SCLEX_OSCRIPT = ... # type: int
    SCLEX_VISUALPROLOG = ... # type: int
    SCLEX_LITERATEHASKELL = ... # type: int
    SCLEX_STTXT = ... # type: int
    SCLEX_KVIRC = ... # type: int
    SCLEX_RUST = ... # type: int
    SCLEX_DMAP = ... # type: int
    SCLEX_AS = ... # type: int
    SCLEX_DMIS = ... # type: int
    SCLEX_REGISTRY = ... # type: int
    SCLEX_BIBTEX = ... # type: int
    SCLEX_SREC = ... # type: int
    SCLEX_IHEX = ... # type: int
    SCLEX_TEHEX = ... # type: int
    SCLEX_JSON = ... # type: int
    SCLEX_EDIFACT = ... # type: int
    SCLEX_INDENT = ... # type: int
    SCLEX_MAXIMA = ... # type: int
    SCLEX_STATA = ... # type: int
    SCLEX_SAS = ... # type: int

    SCMOD_NORM = ... # type: int
    SCMOD_SHIFT = ... # type: int
    SCMOD_CTRL = ... # type: int
    SCMOD_ALT = ... # type: int
    SCMOD_SUPER = ... # type: int
    SCMOD_META = ... # type: int

    SCK_DOWN = ... # type: int
    SCK_UP = ... # type: int
    SCK_LEFT = ... # type: int
    SCK_RIGHT = ... # type: int
    SCK_HOME = ... # type: int
    SCK_END = ... # type: int
    SCK_PRIOR = ... # type: int
    SCK_NEXT = ... # type: int
    SCK_DELETE = ... # type: int
    SCK_INSERT = ... # type: int
    SCK_ESCAPE = ... # type: int
    SCK_BACK = ... # type: int
    SCK_TAB = ... # type: int
    SCK_RETURN = ... # type: int
    SCK_ADD = ... # type: int
    SCK_SUBTRACT = ... # type: int
    SCK_DIVIDE = ... # type: int
    SCK_WIN = ... # type: int
    SCK_RWIN = ... # type: int
    SCK_MENU = ... # type: int

    SC_MOD_INSERTTEXT = ... # type: int
    SC_MOD_DELETETEXT = ... # type: int
    SC_MOD_CHANGESTYLE = ... # type: int
    SC_MOD_CHANGEFOLD = ... # type: int
    SC_PERFORMED_USER = ... # type: int
    SC_PERFORMED_UNDO = ... # type: int
    SC_PERFORMED_REDO = ... # type: int
    SC_MULTISTEPUNDOREDO = ... # type: int
    SC_LASTSTEPINUNDOREDO = ... # type: int
    SC_MOD_CHANGEMARKER = ... # type: int
    SC_MOD_BEFOREINSERT = ... # type: int
    SC_MOD_BEFOREDELETE = ... # type: int
    SC_MULTILINEUNDOREDO = ... # type: int
    SC_STARTACTION = ... # type: int
    SC_MOD_CHANGEINDICATOR = ... # type: int
    SC_MOD_CHANGELINESTATE = ... # type: int
    SC_MOD_CHANGEMARGIN = ... # type: int
    SC_MOD_CHANGEANNOTATION = ... # type: int
    SC_MOD_CONTAINER = ... # type: int
    SC_MOD_LEXERSTATE = ... # type: int
    SC_MOD_INSERTCHECK = ... # type: int
    SC_MOD_CHANGETABSTOPS = ... # type: int
    SC_MODEVENTMASKALL = ... # type: int

    CARETSTYLE_INVISIBLE = ... # type: int
    CARETSTYLE_LINE = ... # type: int
    CARETSTYLE_BLOCK = ... # type: int

    CARET_SLOP = ... # type: int
    CARET_STRICT = ... # type: int
    CARET_JUMPS = ... # type: int
    CARET_EVEN = ... # type: int

    VISIBLE_SLOP = ... # type: int
    VISIBLE_STRICT = ... # type: int

    UNDO_MAY_COALESCE = ... # type: int

    SC_CURSORNORMAL = ... # type: int
    SC_CURSORARROW = ... # type: int
    SC_CURSORWAIT = ... # type: int
    SC_CURSORREVERSEARROW = ... # type: int

    EDGE_NONE = ... # type: int
    EDGE_LINE = ... # type: int
    EDGE_BACKGROUND = ... # type: int
    EDGE_MULTILINE = ... # type: int

    ANNOTATION_HIDDEN = ... # type: int
    ANNOTATION_STANDARD = ... # type: int
    ANNOTATION_BOXED = ... # type: int
    ANNOTATION_INDENTED = ... # type: int

    SC_PHASES_ONE = ... # type: int
    SC_PHASES_TWO = ... # type: int
    SC_PHASES_MULTIPLE = ... # type: int

    SC_CACHE_NONE = ... # type: int
    SC_CACHE_CARET = ... # type: int
    SC_CACHE_PAGE = ... # type: int
    SC_CACHE_DOCUMENT = ... # type: int

    SC_WRAPINDENT_FIXED = ... # type: int
    SC_WRAPINDENT_SAME = ... # type: int
    SC_WRAPINDENT_INDENT = ... # type: int
    SC_WRAPINDENT_DEEPINDENT = ... # type: int

    SC_WRAP_NONE = ... # type: int
    SC_WRAP_WORD = ... # type: int
    SC_WRAP_CHAR = ... # type: int
    SC_WRAP_WHITESPACE = ... # type: int

    SC_TIME_FOREVER = ... # type: int

    SC_LINE_END_TYPE_DEFAULT = ... # type: int
    SC_LINE_END_TYPE_UNICODE = ... # type: int

    SC_FOLDFLAG_LINEBEFORE_EXPANDED = ... # type: int
    SC_FOLDFLAG_LINEBEFORE_CONTRACTED = ... # type: int
    SC_FOLDFLAG_LINEAFTER_EXPANDED = ... # type: int
    SC_FOLDFLAG_LINEAFTER_CONTRACTED = ... # type: int
    SC_FOLDFLAG_LEVELNUMBERS = ... # type: int
    SC_FOLDFLAG_LINESTATE = ... # type: int

    SC_FOLDLEVELBASE = ... # type: int
    SC_FOLDLEVELWHITEFLAG = ... # type: int
    SC_FOLDLEVELHEADERFLAG = ... # type: int
    SC_FOLDLEVELNUMBERMASK = ... # type: int

    SC_FOLDDISPLAYTEXT_HIDDEN = ... # type: int
    SC_FOLDDISPLAYTEXT_STANDARD = ... # type: int
    SC_FOLDDISPLAYTEXT_BOXED = ... # type: int

    SCFIND_WHOLEWORD = ... # type: int
    SCFIND_MATCHCASE = ... # type: int
    SCFIND_WORDSTART = ... # type: int
    SCFIND_REGEXP = ... # type: int
    SCFIND_POSIX = ... # type: int
    SCFIND_CXX11REGEX = ... # type: int

    SC_PRINT_NORMAL = ... # type: int
    SC_PRINT_INVERTLIGHT = ... # type: int
    SC_PRINT_BLACKONWHITE = ... # type: int
    SC_PRINT_COLOURONWHITE = ... # type: int
    SC_PRINT_COLOURONWHITEDEFAULTBG = ... # type: int
    SC_PRINT_SCREENCOLOURS = ... # type: int

    INDIC_PLAIN = ... # type: int
    INDIC_SQUIGGLE = ... # type: int
    INDIC_TT = ... # type: int
    INDIC_DIAGONAL = ... # type: int
    INDIC_STRIKE = ... # type: int
    INDIC_HIDDEN = ... # type: int
    INDIC_BOX = ... # type: int
    INDIC_ROUNDBOX = ... # type: int
    INDIC_STRAIGHTBOX = ... # type: int
    INDIC_DASH = ... # type: int
    INDIC_DOTS = ... # type: int
    INDIC_SQUIGGLELOW = ... # type: int
    INDIC_DOTBOX = ... # type: int
    INDIC_SQUIGGLEPIXMAP = ... # type: int
    INDIC_COMPOSITIONTHICK = ... # type: int
    INDIC_COMPOSITIONTHIN = ... # type: int
    INDIC_FULLBOX = ... # type: int
    INDIC_TEXTFORE = ... # type: int
    INDIC_POINT = ... # type: int
    INDIC_POINTCHARACTER = ... # type: int
    INDIC_GRADIENT = ... # type: int
    INDIC_GRADIENTCENTRE = ... # type: int
    INDIC_IME = ... # type: int
    INDIC_IME_MAX = ... # type: int
    INDIC_CONTAINER = ... # type: int
    INDIC_MAX = ... # type: int
    INDIC0_MASK = ... # type: int
    INDIC1_MASK = ... # type: int
    INDIC2_MASK = ... # type: int
    INDICS_MASK = ... # type: int
    SC_INDICVALUEBIT = ... # type: int
    SC_INDICVALUEMASK = ... # type: int
    SC_INDICFLAG_VALUEBEFORE = ... # type: int

    SC_IV_NONE = ... # type: int
    SC_IV_REAL = ... # type: int
    SC_IV_LOOKFORWARD = ... # type: int
    SC_IV_LOOKBOTH = ... # type: int

    SC_CASE_MIXED = ... # type: int
    SC_CASE_UPPER = ... # type: int
    SC_CASE_LOWER = ... # type: int
    SC_CASE_CAMEL = ... # type: int

    SC_CHARSET_ANSI = ... # type: int
    SC_CHARSET_DEFAULT = ... # type: int
    SC_CHARSET_BALTIC = ... # type: int
    SC_CHARSET_CHINESEBIG5 = ... # type: int
    SC_CHARSET_EASTEUROPE = ... # type: int
    SC_CHARSET_GB2312 = ... # type: int
    SC_CHARSET_GREEK = ... # type: int
    SC_CHARSET_HANGUL = ... # type: int
    SC_CHARSET_MAC = ... # type: int
    SC_CHARSET_OEM = ... # type: int
    SC_CHARSET_RUSSIAN = ... # type: int
    SC_CHARSET_OEM866 = ... # type: int
    SC_CHARSET_CYRILLIC = ... # type: int
    SC_CHARSET_SHIFTJIS = ... # type: int
    SC_CHARSET_SYMBOL = ... # type: int
    SC_CHARSET_TURKISH = ... # type: int
    SC_CHARSET_JOHAB = ... # type: int
    SC_CHARSET_HEBREW = ... # type: int
    SC_CHARSET_ARABIC = ... # type: int
    SC_CHARSET_VIETNAMESE = ... # type: int
    SC_CHARSET_THAI = ... # type: int
    SC_CHARSET_8859_15 = ... # type: int

    STYLE_DEFAULT = ... # type: int
    STYLE_LINENUMBER = ... # type: int
    STYLE_BRACELIGHT = ... # type: int
    STYLE_BRACEBAD = ... # type: int
    STYLE_CONTROLCHAR = ... # type: int
    STYLE_INDENTGUIDE = ... # type: int
    STYLE_CALLTIP = ... # type: int
    STYLE_FOLDDISPLAYTEXT = ... # type: int
    STYLE_LASTPREDEFINED = ... # type: int
    STYLE_MAX = ... # type: int

    SC_MARGIN_SYMBOL = ... # type: int
    SC_MARGIN_NUMBER = ... # type: int
    SC_MARGIN_BACK = ... # type: int
    SC_MARGIN_FORE = ... # type: int
    SC_MARGIN_TEXT = ... # type: int
    SC_MARGIN_RTEXT = ... # type: int
    SC_MARGIN_COLOUR = ... # type: int

    SC_MARKNUM_FOLDEREND = ... # type: int
    SC_MARKNUM_FOLDEROPENMID = ... # type: int
    SC_MARKNUM_FOLDERMIDTAIL = ... # type: int
    SC_MARKNUM_FOLDERTAIL = ... # type: int
    SC_MARKNUM_FOLDERSUB = ... # type: int
    SC_MARKNUM_FOLDER = ... # type: int
    SC_MARKNUM_FOLDEROPEN = ... # type: int
    SC_MASK_FOLDERS = ... # type: int

    SC_MARK_CIRCLE = ... # type: int
    SC_MARK_ROUNDRECT = ... # type: int
    SC_MARK_ARROW = ... # type: int
    SC_MARK_SMALLRECT = ... # type: int
    SC_MARK_SHORTARROW = ... # type: int
    SC_MARK_EMPTY = ... # type: int
    SC_MARK_ARROWDOWN = ... # type: int
    SC_MARK_MINUS = ... # type: int
    SC_MARK_PLUS = ... # type: int
    SC_MARK_VLINE = ... # type: int
    SC_MARK_LCORNER = ... # type: int
    SC_MARK_TCORNER = ... # type: int
    SC_MARK_BOXPLUS = ... # type: int
    SC_MARK_BOXPLUSCONNECTED = ... # type: int
    SC_MARK_BOXMINUS = ... # type: int
    SC_MARK_BOXMINUSCONNECTED = ... # type: int
    SC_MARK_LCORNERCURVE = ... # type: int
    SC_MARK_TCORNERCURVE = ... # type: int
    SC_MARK_CIRCLEPLUS = ... # type: int
    SC_MARK_CIRCLEPLUSCONNECTED = ... # type: int
    SC_MARK_CIRCLEMINUS = ... # type: int
    SC_MARK_CIRCLEMINUSCONNECTED = ... # type: int
    SC_MARK_BACKGROUND = ... # type: int
    SC_MARK_DOTDOTDOT = ... # type: int
    SC_MARK_ARROWS = ... # type: int
    SC_MARK_PIXMAP = ... # type: int
    SC_MARK_FULLRECT = ... # type: int
    SC_MARK_LEFTRECT = ... # type: int
    SC_MARK_AVAILABLE = ... # type: int
    SC_MARK_UNDERLINE = ... # type: int
    SC_MARK_RGBAIMAGE = ... # type: int
    SC_MARK_BOOKMARK = ... # type: int
    SC_MARK_CHARACTER = ... # type: int

    SC_CP_DBCS = ... # type: int
    SC_CP_UTF8 = ... # type: int

    SC_EOL_CRLF = ... # type: int
    SC_EOL_CR = ... # type: int
    SC_EOL_LF = ... # type: int

    SCWS_INVISIBLE = ... # type: int
    SCWS_VISIBLEALWAYS = ... # type: int
    SCWS_VISIBLEAFTERINDENT = ... # type: int
    SCWS_VISIBLEONLYININDENT = ... # type: int

    SCVS_NONE = ... # type: int
    SCVS_RECTANGULARSELECTION = ... # type: int
    SCVS_USERACCESSIBLE = ... # type: int
    SCVS_NOWRAPLINESTART = ... # type: int

    SCTD_LONGARROW = ... # type: int
    SCTD_STRIKEOUT = ... # type: int

    SC_WRAPVISUALFLAGLOC_DEFAULT = ... # type: int
    SC_WRAPVISUALFLAGLOC_END_BY_TEXT = ... # type: int
    SC_WRAPVISUALFLAGLOC_START_BY_TEXT = ... # type: int

    SC_WRAPVISUALFLAG_NONE = ... # type: int
    SC_WRAPVISUALFLAG_END = ... # type: int
    SC_WRAPVISUALFLAG_START = ... # type: int
    SC_WRAPVISUALFLAG_MARGIN = ... # type: int

    SC_UPDATE_CONTENT = ... # type: int
    SC_UPDATE_SELECTION = ... # type: int
    SC_UPDATE_V_SCROLL = ... # type: int
    SC_UPDATE_H_SCROLL = ... # type: int

    SC_TYPE_BOOLEAN = ... # type: int
    SC_TYPE_INTEGER = ... # type: int
    SC_TYPE_STRING = ... # type: int

    SC_STATUS_OK = ... # type: int
    SC_STATUS_FAILURE = ... # type: int
    SC_STATUS_BADALLOC = ... # type: int
    SC_STATUS_WARN_START = ... # type: int
    SC_STATUS_WARNREGEX = ... # type: int

    SC_SEL_STREAM = ... # type: int
    SC_SEL_RECTANGLE = ... # type: int
    SC_SEL_LINES = ... # type: int
    SC_SEL_THIN = ... # type: int

    SC_POPUP_NEVER = ... # type: int
    SC_POPUP_ALL = ... # type: int
    SC_POPUP_TEXT = ... # type: int

    SC_MULTIPASTE_ONCE = ... # type: int
    SC_MULTIPASTE_EACH = ... # type: int

    SC_MULTIAUTOC_ONCE = ... # type: int
    SC_MULTIAUTOC_EACH = ... # type: int

    SC_MARGINOPTION_NONE = ... # type: int
    SC_MARGINOPTION_SUBLINESELECT = ... # type: int

    SC_LINECHARACTERINDEX_NONE = ... # type: int
    SC_LINECHARACTERINDEX_UTF32 = ... # type: int
    SC_LINECHARACTERINDEX_UTF16 = ... # type: int

    SC_IME_WINDOWED = ... # type: int
    SC_IME_INLINE = ... # type: int

    SC_IDLESTYLING_NONE = ... # type: int
    SC_IDLESTYLING_TOVISIBLE = ... # type: int
    SC_IDLESTYLING_AFTERVISIBLE = ... # type: int
    SC_IDLESTYLING_ALL = ... # type: int

    SC_EFF_QUALITY_MASK = ... # type: int
    SC_EFF_QUALITY_DEFAULT = ... # type: int
    SC_EFF_QUALITY_NON_ANTIALIASED = ... # type: int
    SC_EFF_QUALITY_ANTIALIASED = ... # type: int
    SC_EFF_QUALITY_LCD_OPTIMIZED = ... # type: int

    SC_DOCUMENTOPTION_DEFAULT = ... # type: int
    SC_DOCUMENTOPTION_STYLES_NONE = ... # type: int
    SC_DOCUMENTOPTION_TEXT_LARGE = ... # type: int

    SC_CARETSTICKY_OFF = ... # type: int
    SC_CARETSTICKY_ON = ... # type: int
    SC_CARETSTICKY_WHITESPACE = ... # type: int

    SC_ALPHA_TRANSPARENT = ... # type: int
    SC_ALPHA_OPAQUE = ... # type: int
    SC_ALPHA_NOALPHA = ... # type: int

    SC_AC_FILLUP = ... # type: int
    SC_AC_DOUBLECLICK = ... # type: int
    SC_AC_TAB = ... # type: int
    SC_AC_NEWLINE = ... # type: int
    SC_AC_COMMAND = ... # type: int

    SCI_START = ... # type: int
    SCI_OPTIONAL_START = ... # type: int
    SCI_LEXER_START = ... # type: int
    SCI_ADDTEXT = ... # type: int
    SCI_ADDSTYLEDTEXT = ... # type: int
    SCI_INSERTTEXT = ... # type: int
    SCI_CLEARALL = ... # type: int
    SCI_CLEARDOCUMENTSTYLE = ... # type: int
    SCI_GETLENGTH = ... # type: int
    SCI_GETCHARAT = ... # type: int
    SCI_GETCURRENTPOS = ... # type: int
    SCI_GETANCHOR = ... # type: int
    SCI_GETSTYLEAT = ... # type: int
    SCI_REDO = ... # type: int
    SCI_SETUNDOCOLLECTION = ... # type: int
    SCI_SELECTALL = ... # type: int
    SCI_SETSAVEPOINT = ... # type: int
    SCI_GETSTYLEDTEXT = ... # type: int
    SCI_CANREDO = ... # type: int
    SCI_MARKERLINEFROMHANDLE = ... # type: int
    SCI_MARKERDELETEHANDLE = ... # type: int
    SCI_GETUNDOCOLLECTION = ... # type: int
    SCI_GETVIEWWS = ... # type: int
    SCI_SETVIEWWS = ... # type: int
    SCI_POSITIONFROMPOINT = ... # type: int
    SCI_POSITIONFROMPOINTCLOSE = ... # type: int
    SCI_GOTOLINE = ... # type: int
    SCI_GOTOPOS = ... # type: int
    SCI_SETANCHOR = ... # type: int
    SCI_GETCURLINE = ... # type: int
    SCI_GETENDSTYLED = ... # type: int
    SCI_CONVERTEOLS = ... # type: int
    SCI_GETEOLMODE = ... # type: int
    SCI_SETEOLMODE = ... # type: int
    SCI_STARTSTYLING = ... # type: int
    SCI_SETSTYLING = ... # type: int
    SCI_GETBUFFEREDDRAW = ... # type: int
    SCI_SETBUFFEREDDRAW = ... # type: int
    SCI_SETTABWIDTH = ... # type: int
    SCI_GETTABWIDTH = ... # type: int
    SCI_SETCODEPAGE = ... # type: int
    SCI_MARKERDEFINE = ... # type: int
    SCI_MARKERSETFORE = ... # type: int
    SCI_MARKERSETBACK = ... # type: int
    SCI_MARKERADD = ... # type: int
    SCI_MARKERDELETE = ... # type: int
    SCI_MARKERDELETEALL = ... # type: int
    SCI_MARKERGET = ... # type: int
    SCI_MARKERNEXT = ... # type: int
    SCI_MARKERPREVIOUS = ... # type: int
    SCI_MARKERDEFINEPIXMAP = ... # type: int
    SCI_SETMARGINTYPEN = ... # type: int
    SCI_GETMARGINTYPEN = ... # type: int
    SCI_SETMARGINWIDTHN = ... # type: int
    SCI_GETMARGINWIDTHN = ... # type: int
    SCI_SETMARGINMASKN = ... # type: int
    SCI_GETMARGINMASKN = ... # type: int
    SCI_SETMARGINSENSITIVEN = ... # type: int
    SCI_GETMARGINSENSITIVEN = ... # type: int
    SCI_SETMARGINCURSORN = ... # type: int
    SCI_GETMARGINCURSORN = ... # type: int
    SCI_STYLECLEARALL = ... # type: int
    SCI_STYLESETFORE = ... # type: int
    SCI_STYLESETBACK = ... # type: int
    SCI_STYLESETBOLD = ... # type: int
    SCI_STYLESETITALIC = ... # type: int
    SCI_STYLESETSIZE = ... # type: int
    SCI_STYLESETFONT = ... # type: int
    SCI_STYLESETEOLFILLED = ... # type: int
    SCI_STYLERESETDEFAULT = ... # type: int
    SCI_STYLESETUNDERLINE = ... # type: int
    SCI_STYLESETCASE = ... # type: int
    SCI_STYLESETCHARACTERSET = ... # type: int
    SCI_SETSELFORE = ... # type: int
    SCI_SETSELBACK = ... # type: int
    SCI_SETCARETFORE = ... # type: int
    SCI_ASSIGNCMDKEY = ... # type: int
    SCI_CLEARCMDKEY = ... # type: int
    SCI_CLEARALLCMDKEYS = ... # type: int
    SCI_SETSTYLINGEX = ... # type: int
    SCI_STYLESETVISIBLE = ... # type: int
    SCI_GETCARETPERIOD = ... # type: int
    SCI_SETCARETPERIOD = ... # type: int
    SCI_SETWORDCHARS = ... # type: int
    SCI_BEGINUNDOACTION = ... # type: int
    SCI_ENDUNDOACTION = ... # type: int
    SCI_INDICSETSTYLE = ... # type: int
    SCI_INDICGETSTYLE = ... # type: int
    SCI_INDICSETFORE = ... # type: int
    SCI_INDICGETFORE = ... # type: int
    SCI_SETWHITESPACEFORE = ... # type: int
    SCI_SETWHITESPACEBACK = ... # type: int
    SCI_SETWHITESPACESIZE = ... # type: int
    SCI_GETWHITESPACESIZE = ... # type: int
    SCI_SETSTYLEBITS = ... # type: int
    SCI_GETSTYLEBITS = ... # type: int
    SCI_SETLINESTATE = ... # type: int
    SCI_GETLINESTATE = ... # type: int
    SCI_GETMAXLINESTATE = ... # type: int
    SCI_GETCARETLINEVISIBLE = ... # type: int
    SCI_SETCARETLINEVISIBLE = ... # type: int
    SCI_GETCARETLINEBACK = ... # type: int
    SCI_SETCARETLINEBACK = ... # type: int
    SCI_STYLESETCHANGEABLE = ... # type: int
    SCI_AUTOCSHOW = ... # type: int
    SCI_AUTOCCANCEL = ... # type: int
    SCI_AUTOCACTIVE = ... # type: int
    SCI_AUTOCPOSSTART = ... # type: int
    SCI_AUTOCCOMPLETE = ... # type: int
    SCI_AUTOCSTOPS = ... # type: int
    SCI_AUTOCSETSEPARATOR = ... # type: int
    SCI_AUTOCGETSEPARATOR = ... # type: int
    SCI_AUTOCSELECT = ... # type: int
    SCI_AUTOCSETCANCELATSTART = ... # type: int
    SCI_AUTOCGETCANCELATSTART = ... # type: int
    SCI_AUTOCSETFILLUPS = ... # type: int
    SCI_AUTOCSETCHOOSESINGLE = ... # type: int
    SCI_AUTOCGETCHOOSESINGLE = ... # type: int
    SCI_AUTOCSETIGNORECASE = ... # type: int
    SCI_AUTOCGETIGNORECASE = ... # type: int
    SCI_USERLISTSHOW = ... # type: int
    SCI_AUTOCSETAUTOHIDE = ... # type: int
    SCI_AUTOCGETAUTOHIDE = ... # type: int
    SCI_AUTOCSETDROPRESTOFWORD = ... # type: int
    SCI_AUTOCGETDROPRESTOFWORD = ... # type: int
    SCI_SETINDENT = ... # type: int
    SCI_GETINDENT = ... # type: int
    SCI_SETUSETABS = ... # type: int
    SCI_GETUSETABS = ... # type: int
    SCI_SETLINEINDENTATION = ... # type: int
    SCI_GETLINEINDENTATION = ... # type: int
    SCI_GETLINEINDENTPOSITION = ... # type: int
    SCI_GETCOLUMN = ... # type: int
    SCI_SETHSCROLLBAR = ... # type: int
    SCI_GETHSCROLLBAR = ... # type: int
    SCI_SETINDENTATIONGUIDES = ... # type: int
    SCI_GETINDENTATIONGUIDES = ... # type: int
    SCI_SETHIGHLIGHTGUIDE = ... # type: int
    SCI_GETHIGHLIGHTGUIDE = ... # type: int
    SCI_GETLINEENDPOSITION = ... # type: int
    SCI_GETCODEPAGE = ... # type: int
    SCI_GETCARETFORE = ... # type: int
    SCI_GETREADONLY = ... # type: int
    SCI_SETCURRENTPOS = ... # type: int
    SCI_SETSELECTIONSTART = ... # type: int
    SCI_GETSELECTIONSTART = ... # type: int
    SCI_SETSELECTIONEND = ... # type: int
    SCI_GETSELECTIONEND = ... # type: int
    SCI_SETPRINTMAGNIFICATION = ... # type: int
    SCI_GETPRINTMAGNIFICATION = ... # type: int
    SCI_SETPRINTCOLOURMODE = ... # type: int
    SCI_GETPRINTCOLOURMODE = ... # type: int
    SCI_FINDTEXT = ... # type: int
    SCI_FORMATRANGE = ... # type: int
    SCI_GETFIRSTVISIBLELINE = ... # type: int
    SCI_GETLINE = ... # type: int
    SCI_GETLINECOUNT = ... # type: int
    SCI_SETMARGINLEFT = ... # type: int
    SCI_GETMARGINLEFT = ... # type: int
    SCI_SETMARGINRIGHT = ... # type: int
    SCI_GETMARGINRIGHT = ... # type: int
    SCI_GETMODIFY = ... # type: int
    SCI_SETSEL = ... # type: int
    SCI_GETSELTEXT = ... # type: int
    SCI_GETTEXTRANGE = ... # type: int
    SCI_HIDESELECTION = ... # type: int
    SCI_POINTXFROMPOSITION = ... # type: int
    SCI_POINTYFROMPOSITION = ... # type: int
    SCI_LINEFROMPOSITION = ... # type: int
    SCI_POSITIONFROMLINE = ... # type: int
    SCI_LINESCROLL = ... # type: int
    SCI_SCROLLCARET = ... # type: int
    SCI_REPLACESEL = ... # type: int
    SCI_SETREADONLY = ... # type: int
    SCI_NULL = ... # type: int
    SCI_CANPASTE = ... # type: int
    SCI_CANUNDO = ... # type: int
    SCI_EMPTYUNDOBUFFER = ... # type: int
    SCI_UNDO = ... # type: int
    SCI_CUT = ... # type: int
    SCI_COPY = ... # type: int
    SCI_PASTE = ... # type: int
    SCI_CLEAR = ... # type: int
    SCI_SETTEXT = ... # type: int
    SCI_GETTEXT = ... # type: int
    SCI_GETTEXTLENGTH = ... # type: int
    SCI_GETDIRECTFUNCTION = ... # type: int
    SCI_GETDIRECTPOINTER = ... # type: int
    SCI_SETOVERTYPE = ... # type: int
    SCI_GETOVERTYPE = ... # type: int
    SCI_SETCARETWIDTH = ... # type: int
    SCI_GETCARETWIDTH = ... # type: int
    SCI_SETTARGETSTART = ... # type: int
    SCI_GETTARGETSTART = ... # type: int
    SCI_SETTARGETEND = ... # type: int
    SCI_GETTARGETEND = ... # type: int
    SCI_REPLACETARGET = ... # type: int
    SCI_REPLACETARGETRE = ... # type: int
    SCI_SEARCHINTARGET = ... # type: int
    SCI_SETSEARCHFLAGS = ... # type: int
    SCI_GETSEARCHFLAGS = ... # type: int
    SCI_CALLTIPSHOW = ... # type: int
    SCI_CALLTIPCANCEL = ... # type: int
    SCI_CALLTIPACTIVE = ... # type: int
    SCI_CALLTIPPOSSTART = ... # type: int
    SCI_CALLTIPSETHLT = ... # type: int
    SCI_CALLTIPSETBACK = ... # type: int
    SCI_CALLTIPSETFORE = ... # type: int
    SCI_CALLTIPSETFOREHLT = ... # type: int
    SCI_AUTOCSETMAXWIDTH = ... # type: int
    SCI_AUTOCGETMAXWIDTH = ... # type: int
    SCI_AUTOCSETMAXHEIGHT = ... # type: int
    SCI_AUTOCGETMAXHEIGHT = ... # type: int
    SCI_CALLTIPUSESTYLE = ... # type: int
    SCI_VISIBLEFROMDOCLINE = ... # type: int
    SCI_DOCLINEFROMVISIBLE = ... # type: int
    SCI_SETFOLDLEVEL = ... # type: int
    SCI_GETFOLDLEVEL = ... # type: int
    SCI_GETLASTCHILD = ... # type: int
    SCI_GETFOLDPARENT = ... # type: int
    SCI_SHOWLINES = ... # type: int
    SCI_HIDELINES = ... # type: int
    SCI_GETLINEVISIBLE = ... # type: int
    SCI_SETFOLDEXPANDED = ... # type: int
    SCI_GETFOLDEXPANDED = ... # type: int
    SCI_TOGGLEFOLD = ... # type: int
    SCI_ENSUREVISIBLE = ... # type: int
    SCI_SETFOLDFLAGS = ... # type: int
    SCI_ENSUREVISIBLEENFORCEPOLICY = ... # type: int
    SCI_WRAPCOUNT = ... # type: int
    SCI_SETTABINDENTS = ... # type: int
    SCI_GETTABINDENTS = ... # type: int
    SCI_SETBACKSPACEUNINDENTS = ... # type: int
    SCI_GETBACKSPACEUNINDENTS = ... # type: int
    SCI_SETMOUSEDWELLTIME = ... # type: int
    SCI_GETMOUSEDWELLTIME = ... # type: int
    SCI_WORDSTARTPOSITION = ... # type: int
    SCI_WORDENDPOSITION = ... # type: int
    SCI_SETWRAPMODE = ... # type: int
    SCI_GETWRAPMODE = ... # type: int
    SCI_SETLAYOUTCACHE = ... # type: int
    SCI_GETLAYOUTCACHE = ... # type: int
    SCI_SETSCROLLWIDTH = ... # type: int
    SCI_GETSCROLLWIDTH = ... # type: int
    SCI_TEXTWIDTH = ... # type: int
    SCI_SETENDATLASTLINE = ... # type: int
    SCI_GETENDATLASTLINE = ... # type: int
    SCI_TEXTHEIGHT = ... # type: int
    SCI_SETVSCROLLBAR = ... # type: int
    SCI_GETVSCROLLBAR = ... # type: int
    SCI_APPENDTEXT = ... # type: int
    SCI_GETTWOPHASEDRAW = ... # type: int
    SCI_SETTWOPHASEDRAW = ... # type: int
    SCI_AUTOCGETTYPESEPARATOR = ... # type: int
    SCI_AUTOCSETTYPESEPARATOR = ... # type: int
    SCI_TARGETFROMSELECTION = ... # type: int
    SCI_LINESJOIN = ... # type: int
    SCI_LINESSPLIT = ... # type: int
    SCI_SETFOLDMARGINCOLOUR = ... # type: int
    SCI_SETFOLDMARGINHICOLOUR = ... # type: int
    SCI_MARKERSETBACKSELECTED = ... # type: int
    SCI_MARKERENABLEHIGHLIGHT = ... # type: int
    SCI_LINEDOWN = ... # type: int
    SCI_LINEDOWNEXTEND = ... # type: int
    SCI_LINEUP = ... # type: int
    SCI_LINEUPEXTEND = ... # type: int
    SCI_CHARLEFT = ... # type: int
    SCI_CHARLEFTEXTEND = ... # type: int
    SCI_CHARRIGHT = ... # type: int
    SCI_CHARRIGHTEXTEND = ... # type: int
    SCI_WORDLEFT = ... # type: int
    SCI_WORDLEFTEXTEND = ... # type: int
    SCI_WORDRIGHT = ... # type: int
    SCI_WORDRIGHTEXTEND = ... # type: int
    SCI_HOME = ... # type: int
    SCI_HOMEEXTEND = ... # type: int
    SCI_LINEEND = ... # type: int
    SCI_LINEENDEXTEND = ... # type: int
    SCI_DOCUMENTSTART = ... # type: int
    SCI_DOCUMENTSTARTEXTEND = ... # type: int
    SCI_DOCUMENTEND = ... # type: int
    SCI_DOCUMENTENDEXTEND = ... # type: int
    SCI_PAGEUP = ... # type: int
    SCI_PAGEUPEXTEND = ... # type: int
    SCI_PAGEDOWN = ... # type: int
    SCI_PAGEDOWNEXTEND = ... # type: int
    SCI_EDITTOGGLEOVERTYPE = ... # type: int
    SCI_CANCEL = ... # type: int
    SCI_DELETEBACK = ... # type: int
    SCI_TAB = ... # type: int
    SCI_BACKTAB = ... # type: int
    SCI_NEWLINE = ... # type: int
    SCI_FORMFEED = ... # type: int
    SCI_VCHOME = ... # type: int
    SCI_VCHOMEEXTEND = ... # type: int
    SCI_ZOOMIN = ... # type: int
    SCI_ZOOMOUT = ... # type: int
    SCI_DELWORDLEFT = ... # type: int
    SCI_DELWORDRIGHT = ... # type: int
    SCI_LINECUT = ... # type: int
    SCI_LINEDELETE = ... # type: int
    SCI_LINETRANSPOSE = ... # type: int
    SCI_LOWERCASE = ... # type: int
    SCI_UPPERCASE = ... # type: int
    SCI_LINESCROLLDOWN = ... # type: int
    SCI_LINESCROLLUP = ... # type: int
    SCI_DELETEBACKNOTLINE = ... # type: int
    SCI_HOMEDISPLAY = ... # type: int
    SCI_HOMEDISPLAYEXTEND = ... # type: int
    SCI_LINEENDDISPLAY = ... # type: int
    SCI_LINEENDDISPLAYEXTEND = ... # type: int
    SCI_MOVECARETINSIDEVIEW = ... # type: int
    SCI_LINELENGTH = ... # type: int
    SCI_BRACEHIGHLIGHT = ... # type: int
    SCI_BRACEBADLIGHT = ... # type: int
    SCI_BRACEMATCH = ... # type: int
    SCI_GETVIEWEOL = ... # type: int
    SCI_SETVIEWEOL = ... # type: int
    SCI_GETDOCPOINTER = ... # type: int
    SCI_SETDOCPOINTER = ... # type: int
    SCI_SETMODEVENTMASK = ... # type: int
    SCI_GETEDGECOLUMN = ... # type: int
    SCI_SETEDGECOLUMN = ... # type: int
    SCI_GETEDGEMODE = ... # type: int
    SCI_SETEDGEMODE = ... # type: int
    SCI_GETEDGECOLOUR = ... # type: int
    SCI_SETEDGECOLOUR = ... # type: int
    SCI_SEARCHANCHOR = ... # type: int
    SCI_SEARCHNEXT = ... # type: int
    SCI_SEARCHPREV = ... # type: int
    SCI_LINESONSCREEN = ... # type: int
    SCI_USEPOPUP = ... # type: int
    SCI_SELECTIONISRECTANGLE = ... # type: int
    SCI_SETZOOM = ... # type: int
    SCI_GETZOOM = ... # type: int
    SCI_CREATEDOCUMENT = ... # type: int
    SCI_ADDREFDOCUMENT = ... # type: int
    SCI_RELEASEDOCUMENT = ... # type: int
    SCI_GETMODEVENTMASK = ... # type: int
    SCI_SETFOCUS = ... # type: int
    SCI_GETFOCUS = ... # type: int
    SCI_SETSTATUS = ... # type: int
    SCI_GETSTATUS = ... # type: int
    SCI_SETMOUSEDOWNCAPTURES = ... # type: int
    SCI_GETMOUSEDOWNCAPTURES = ... # type: int
    SCI_SETCURSOR = ... # type: int
    SCI_GETCURSOR = ... # type: int
    SCI_SETCONTROLCHARSYMBOL = ... # type: int
    SCI_GETCONTROLCHARSYMBOL = ... # type: int
    SCI_WORDPARTLEFT = ... # type: int
    SCI_WORDPARTLEFTEXTEND = ... # type: int
    SCI_WORDPARTRIGHT = ... # type: int
    SCI_WORDPARTRIGHTEXTEND = ... # type: int
    SCI_SETVISIBLEPOLICY = ... # type: int
    SCI_DELLINELEFT = ... # type: int
    SCI_DELLINERIGHT = ... # type: int
    SCI_SETXOFFSET = ... # type: int
    SCI_GETXOFFSET = ... # type: int
    SCI_CHOOSECARETX = ... # type: int
    SCI_GRABFOCUS = ... # type: int
    SCI_SETXCARETPOLICY = ... # type: int
    SCI_SETYCARETPOLICY = ... # type: int
    SCI_LINEDUPLICATE = ... # type: int
    SCI_REGISTERIMAGE = ... # type: int
    SCI_SETPRINTWRAPMODE = ... # type: int
    SCI_GETPRINTWRAPMODE = ... # type: int
    SCI_CLEARREGISTEREDIMAGES = ... # type: int
    SCI_STYLESETHOTSPOT = ... # type: int
    SCI_SETHOTSPOTACTIVEFORE = ... # type: int
    SCI_SETHOTSPOTACTIVEBACK = ... # type: int
    SCI_SETHOTSPOTACTIVEUNDERLINE = ... # type: int
    SCI_SETHOTSPOTSINGLELINE = ... # type: int
    SCI_PARADOWN = ... # type: int
    SCI_PARADOWNEXTEND = ... # type: int
    SCI_PARAUP = ... # type: int
    SCI_PARAUPEXTEND = ... # type: int
    SCI_POSITIONBEFORE = ... # type: int
    SCI_POSITIONAFTER = ... # type: int
    SCI_COPYRANGE = ... # type: int
    SCI_COPYTEXT = ... # type: int
    SCI_SETSELECTIONMODE = ... # type: int
    SCI_GETSELECTIONMODE = ... # type: int
    SCI_GETLINESELSTARTPOSITION = ... # type: int
    SCI_GETLINESELENDPOSITION = ... # type: int
    SCI_LINEDOWNRECTEXTEND = ... # type: int
    SCI_LINEUPRECTEXTEND = ... # type: int
    SCI_CHARLEFTRECTEXTEND = ... # type: int
    SCI_CHARRIGHTRECTEXTEND = ... # type: int
    SCI_HOMERECTEXTEND = ... # type: int
    SCI_VCHOMERECTEXTEND = ... # type: int
    SCI_LINEENDRECTEXTEND = ... # type: int
    SCI_PAGEUPRECTEXTEND = ... # type: int
    SCI_PAGEDOWNRECTEXTEND = ... # type: int
    SCI_STUTTEREDPAGEUP = ... # type: int
    SCI_STUTTEREDPAGEUPEXTEND = ... # type: int
    SCI_STUTTEREDPAGEDOWN = ... # type: int
    SCI_STUTTEREDPAGEDOWNEXTEND = ... # type: int
    SCI_WORDLEFTEND = ... # type: int
    SCI_WORDLEFTENDEXTEND = ... # type: int
    SCI_WORDRIGHTEND = ... # type: int
    SCI_WORDRIGHTENDEXTEND = ... # type: int
    SCI_SETWHITESPACECHARS = ... # type: int
    SCI_SETCHARSDEFAULT = ... # type: int
    SCI_AUTOCGETCURRENT = ... # type: int
    SCI_ALLOCATE = ... # type: int
    SCI_HOMEWRAP = ... # type: int
    SCI_HOMEWRAPEXTEND = ... # type: int
    SCI_LINEENDWRAP = ... # type: int
    SCI_LINEENDWRAPEXTEND = ... # type: int
    SCI_VCHOMEWRAP = ... # type: int
    SCI_VCHOMEWRAPEXTEND = ... # type: int
    SCI_LINECOPY = ... # type: int
    SCI_FINDCOLUMN = ... # type: int
    SCI_GETCARETSTICKY = ... # type: int
    SCI_SETCARETSTICKY = ... # type: int
    SCI_TOGGLECARETSTICKY = ... # type: int
    SCI_SETWRAPVISUALFLAGS = ... # type: int
    SCI_GETWRAPVISUALFLAGS = ... # type: int
    SCI_SETWRAPVISUALFLAGSLOCATION = ... # type: int
    SCI_GETWRAPVISUALFLAGSLOCATION = ... # type: int
    SCI_SETWRAPSTARTINDENT = ... # type: int
    SCI_GETWRAPSTARTINDENT = ... # type: int
    SCI_MARKERADDSET = ... # type: int
    SCI_SETPASTECONVERTENDINGS = ... # type: int
    SCI_GETPASTECONVERTENDINGS = ... # type: int
    SCI_SELECTIONDUPLICATE = ... # type: int
    SCI_SETCARETLINEBACKALPHA = ... # type: int
    SCI_GETCARETLINEBACKALPHA = ... # type: int
    SCI_SETWRAPINDENTMODE = ... # type: int
    SCI_GETWRAPINDENTMODE = ... # type: int
    SCI_MARKERSETALPHA = ... # type: int
    SCI_GETSELALPHA = ... # type: int
    SCI_SETSELALPHA = ... # type: int
    SCI_GETSELEOLFILLED = ... # type: int
    SCI_SETSELEOLFILLED = ... # type: int
    SCI_STYLEGETFORE = ... # type: int
    SCI_STYLEGETBACK = ... # type: int
    SCI_STYLEGETBOLD = ... # type: int
    SCI_STYLEGETITALIC = ... # type: int
    SCI_STYLEGETSIZE = ... # type: int
    SCI_STYLEGETFONT = ... # type: int
    SCI_STYLEGETEOLFILLED = ... # type: int
    SCI_STYLEGETUNDERLINE = ... # type: int
    SCI_STYLEGETCASE = ... # type: int
    SCI_STYLEGETCHARACTERSET = ... # type: int
    SCI_STYLEGETVISIBLE = ... # type: int
    SCI_STYLEGETCHANGEABLE = ... # type: int
    SCI_STYLEGETHOTSPOT = ... # type: int
    SCI_GETHOTSPOTACTIVEFORE = ... # type: int
    SCI_GETHOTSPOTACTIVEBACK = ... # type: int
    SCI_GETHOTSPOTACTIVEUNDERLINE = ... # type: int
    SCI_GETHOTSPOTSINGLELINE = ... # type: int
    SCI_BRACEHIGHLIGHTINDICATOR = ... # type: int
    SCI_BRACEBADLIGHTINDICATOR = ... # type: int
    SCI_SETINDICATORCURRENT = ... # type: int
    SCI_GETINDICATORCURRENT = ... # type: int
    SCI_SETINDICATORVALUE = ... # type: int
    SCI_GETINDICATORVALUE = ... # type: int
    SCI_INDICATORFILLRANGE = ... # type: int
    SCI_INDICATORCLEARRANGE = ... # type: int
    SCI_INDICATORALLONFOR = ... # type: int
    SCI_INDICATORVALUEAT = ... # type: int
    SCI_INDICATORSTART = ... # type: int
    SCI_INDICATOREND = ... # type: int
    SCI_INDICSETUNDER = ... # type: int
    SCI_INDICGETUNDER = ... # type: int
    SCI_SETCARETSTYLE = ... # type: int
    SCI_GETCARETSTYLE = ... # type: int
    SCI_SETPOSITIONCACHE = ... # type: int
    SCI_GETPOSITIONCACHE = ... # type: int
    SCI_SETSCROLLWIDTHTRACKING = ... # type: int
    SCI_GETSCROLLWIDTHTRACKING = ... # type: int
    SCI_DELWORDRIGHTEND = ... # type: int
    SCI_COPYALLOWLINE = ... # type: int
    SCI_GETCHARACTERPOINTER = ... # type: int
    SCI_INDICSETALPHA = ... # type: int
    SCI_INDICGETALPHA = ... # type: int
    SCI_SETEXTRAASCENT = ... # type: int
    SCI_GETEXTRAASCENT = ... # type: int
    SCI_SETEXTRADESCENT = ... # type: int
    SCI_GETEXTRADESCENT = ... # type: int
    SCI_MARKERSYMBOLDEFINED = ... # type: int
    SCI_MARGINSETTEXT = ... # type: int
    SCI_MARGINGETTEXT = ... # type: int
    SCI_MARGINSETSTYLE = ... # type: int
    SCI_MARGINGETSTYLE = ... # type: int
    SCI_MARGINSETSTYLES = ... # type: int
    SCI_MARGINGETSTYLES = ... # type: int
    SCI_MARGINTEXTCLEARALL = ... # type: int
    SCI_MARGINSETSTYLEOFFSET = ... # type: int
    SCI_MARGINGETSTYLEOFFSET = ... # type: int
    SCI_SETMARGINOPTIONS = ... # type: int
    SCI_ANNOTATIONSETTEXT = ... # type: int
    SCI_ANNOTATIONGETTEXT = ... # type: int
    SCI_ANNOTATIONSETSTYLE = ... # type: int
    SCI_ANNOTATIONGETSTYLE = ... # type: int
    SCI_ANNOTATIONSETSTYLES = ... # type: int
    SCI_ANNOTATIONGETSTYLES = ... # type: int
    SCI_ANNOTATIONGETLINES = ... # type: int
    SCI_ANNOTATIONCLEARALL = ... # type: int
    SCI_ANNOTATIONSETVISIBLE = ... # type: int
    SCI_ANNOTATIONGETVISIBLE = ... # type: int
    SCI_ANNOTATIONSETSTYLEOFFSET = ... # type: int
    SCI_ANNOTATIONGETSTYLEOFFSET = ... # type: int
    SCI_SETEMPTYSELECTION = ... # type: int
    SCI_GETMARGINOPTIONS = ... # type: int
    SCI_INDICSETOUTLINEALPHA = ... # type: int
    SCI_INDICGETOUTLINEALPHA = ... # type: int
    SCI_ADDUNDOACTION = ... # type: int
    SCI_CHARPOSITIONFROMPOINT = ... # type: int
    SCI_CHARPOSITIONFROMPOINTCLOSE = ... # type: int
    SCI_SETMULTIPLESELECTION = ... # type: int
    SCI_GETMULTIPLESELECTION = ... # type: int
    SCI_SETADDITIONALSELECTIONTYPING = ... # type: int
    SCI_GETADDITIONALSELECTIONTYPING = ... # type: int
    SCI_SETADDITIONALCARETSBLINK = ... # type: int
    SCI_GETADDITIONALCARETSBLINK = ... # type: int
    SCI_SCROLLRANGE = ... # type: int
    SCI_GETSELECTIONS = ... # type: int
    SCI_CLEARSELECTIONS = ... # type: int
    SCI_SETSELECTION = ... # type: int
    SCI_ADDSELECTION = ... # type: int
    SCI_SETMAINSELECTION = ... # type: int
    SCI_GETMAINSELECTION = ... # type: int
    SCI_SETSELECTIONNCARET = ... # type: int
    SCI_GETSELECTIONNCARET = ... # type: int
    SCI_SETSELECTIONNANCHOR = ... # type: int
    SCI_GETSELECTIONNANCHOR = ... # type: int
    SCI_SETSELECTIONNCARETVIRTUALSPACE = ... # type: int
    SCI_GETSELECTIONNCARETVIRTUALSPACE = ... # type: int
    SCI_SETSELECTIONNANCHORVIRTUALSPACE = ... # type: int
    SCI_GETSELECTIONNANCHORVIRTUALSPACE = ... # type: int
    SCI_SETSELECTIONNSTART = ... # type: int
    SCI_GETSELECTIONNSTART = ... # type: int
    SCI_SETSELECTIONNEND = ... # type: int
    SCI_GETSELECTIONNEND = ... # type: int
    SCI_SETRECTANGULARSELECTIONCARET = ... # type: int
    SCI_GETRECTANGULARSELECTIONCARET = ... # type: int
    SCI_SETRECTANGULARSELECTIONANCHOR = ... # type: int
    SCI_GETRECTANGULARSELECTIONANCHOR = ... # type: int
    SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE = ... # type: int
    SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE = ... # type: int
    SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE = ... # type: int
    SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE = ... # type: int
    SCI_SETVIRTUALSPACEOPTIONS = ... # type: int
    SCI_GETVIRTUALSPACEOPTIONS = ... # type: int
    SCI_SETRECTANGULARSELECTIONMODIFIER = ... # type: int
    SCI_GETRECTANGULARSELECTIONMODIFIER = ... # type: int
    SCI_SETADDITIONALSELFORE = ... # type: int
    SCI_SETADDITIONALSELBACK = ... # type: int
    SCI_SETADDITIONALSELALPHA = ... # type: int
    SCI_GETADDITIONALSELALPHA = ... # type: int
    SCI_SETADDITIONALCARETFORE = ... # type: int
    SCI_GETADDITIONALCARETFORE = ... # type: int
    SCI_ROTATESELECTION = ... # type: int
    SCI_SWAPMAINANCHORCARET = ... # type: int
    SCI_SETADDITIONALCARETSVISIBLE = ... # type: int
    SCI_GETADDITIONALCARETSVISIBLE = ... # type: int
    SCI_AUTOCGETCURRENTTEXT = ... # type: int
    SCI_SETFONTQUALITY = ... # type: int
    SCI_GETFONTQUALITY = ... # type: int
    SCI_SETFIRSTVISIBLELINE = ... # type: int
    SCI_SETMULTIPASTE = ... # type: int
    SCI_GETMULTIPASTE = ... # type: int
    SCI_GETTAG = ... # type: int
    SCI_CHANGELEXERSTATE = ... # type: int
    SCI_CONTRACTEDFOLDNEXT = ... # type: int
    SCI_VERTICALCENTRECARET = ... # type: int
    SCI_MOVESELECTEDLINESUP = ... # type: int
    SCI_MOVESELECTEDLINESDOWN = ... # type: int
    SCI_SETIDENTIFIER = ... # type: int
    SCI_GETIDENTIFIER = ... # type: int
    SCI_RGBAIMAGESETWIDTH = ... # type: int
    SCI_RGBAIMAGESETHEIGHT = ... # type: int
    SCI_MARKERDEFINERGBAIMAGE = ... # type: int
    SCI_REGISTERRGBAIMAGE = ... # type: int
    SCI_SCROLLTOSTART = ... # type: int
    SCI_SCROLLTOEND = ... # type: int
    SCI_STARTRECORD = ... # type: int
    SCI_STOPRECORD = ... # type: int
    SCI_SETLEXER = ... # type: int
    SCI_GETLEXER = ... # type: int
    SCI_COLOURISE = ... # type: int
    SCI_SETPROPERTY = ... # type: int
    SCI_SETKEYWORDS = ... # type: int
    SCI_SETLEXERLANGUAGE = ... # type: int
    SCI_LOADLEXERLIBRARY = ... # type: int
    SCI_GETPROPERTY = ... # type: int
    SCI_GETPROPERTYEXPANDED = ... # type: int
    SCI_GETPROPERTYINT = ... # type: int
    SCI_GETSTYLEBITSNEEDED = ... # type: int
    SCI_GETLEXERLANGUAGE = ... # type: int
    SCI_PRIVATELEXERCALL = ... # type: int
    SCI_PROPERTYNAMES = ... # type: int
    SCI_PROPERTYTYPE = ... # type: int
    SCI_DESCRIBEPROPERTY = ... # type: int
    SCI_DESCRIBEKEYWORDSETS = ... # type: int
    SCI_AUTOCSETCASEINSENSITIVEBEHAVIOUR = ... # type: int
    SCI_AUTOCGETCASEINSENSITIVEBEHAVIOUR = ... # type: int
    SCI_AUTOCSETMULTI = ... # type: int
    SCI_AUTOCGETMULTI = ... # type: int
    SCI_CALLTIPSETPOSITION = ... # type: int
    SCI_CALLTIPSETPOSSTART = ... # type: int
    SCI_COUNTCHARACTERS = ... # type: int
    SCI_CREATELOADER = ... # type: int
    SCI_DELETERANGE = ... # type: int
    SCI_FINDINDICATORFLASH = ... # type: int
    SCI_FINDINDICATORHIDE = ... # type: int
    SCI_FINDINDICATORSHOW = ... # type: int
    SCI_GETALLLINESVISIBLE = ... # type: int
    SCI_GETGAPPOSITION = ... # type: int
    SCI_GETPUNCTUATIONCHARS = ... # type: int
    SCI_GETRANGEPOINTER = ... # type: int
    SCI_GETSELECTIONEMPTY = ... # type: int
    SCI_GETTECHNOLOGY = ... # type: int
    SCI_GETWHITESPACECHARS = ... # type: int
    SCI_GETWORDCHARS = ... # type: int
    SCI_RGBAIMAGESETSCALE = ... # type: int
    SCI_SETPUNCTUATIONCHARS = ... # type: int
    SCI_SETTECHNOLOGY = ... # type: int
    SCI_STYLESETSIZEFRACTIONAL = ... # type: int
    SCI_STYLEGETSIZEFRACTIONAL = ... # type: int
    SCI_STYLESETWEIGHT = ... # type: int
    SCI_STYLEGETWEIGHT = ... # type: int
    SCI_FOLDLINE = ... # type: int
    SCI_FOLDCHILDREN = ... # type: int
    SCI_EXPANDCHILDREN = ... # type: int
    SCI_FOLDALL = ... # type: int
    SCI_SETAUTOMATICFOLD = ... # type: int
    SCI_GETAUTOMATICFOLD = ... # type: int
    SCI_AUTOCSETORDER = ... # type: int
    SCI_AUTOCGETORDER = ... # type: int
    SCI_POSITIONRELATIVE = ... # type: int
    SCI_DROPSELECTIONN = ... # type: int
    SCI_CHANGEINSERTION = ... # type: int
    SCI_GETPHASESDRAW = ... # type: int
    SCI_SETPHASESDRAW = ... # type: int
    SCI_CLEARTABSTOPS = ... # type: int
    SCI_ADDTABSTOP = ... # type: int
    SCI_GETNEXTTABSTOP = ... # type: int
    SCI_GETIMEINTERACTION = ... # type: int
    SCI_SETIMEINTERACTION = ... # type: int
    SCI_INDICSETHOVERSTYLE = ... # type: int
    SCI_INDICGETHOVERSTYLE = ... # type: int
    SCI_INDICSETHOVERFORE = ... # type: int
    SCI_INDICGETHOVERFORE = ... # type: int
    SCI_INDICSETFLAGS = ... # type: int
    SCI_INDICGETFLAGS = ... # type: int
    SCI_SETTARGETRANGE = ... # type: int
    SCI_GETTARGETTEXT = ... # type: int
    SCI_RELEASEALLEXTENDEDSTYLES = ... # type: int
    SCI_ALLOCATEEXTENDEDSTYLES = ... # type: int
    SCI_SETMOUSESELECTIONRECTANGULARSWITCH = ... # type: int
    SCI_GETMOUSESELECTIONRECTANGULARSWITCH = ... # type: int
    SCI_GETCARETLINEVISIBLEALWAYS = ... # type: int
    SCI_SETCARETLINEVISIBLEALWAYS = ... # type: int
    SCI_SETLINEENDTYPESALLOWED = ... # type: int
    SCI_GETLINEENDTYPESALLOWED = ... # type: int
    SCI_GETLINEENDTYPESACTIVE = ... # type: int
    SCI_SETREPRESENTATION = ... # type: int
    SCI_GETREPRESENTATION = ... # type: int
    SCI_CLEARREPRESENTATION = ... # type: int
    SCI_GETLINEENDTYPESSUPPORTED = ... # type: int
    SCI_ALLOCATESUBSTYLES = ... # type: int
    SCI_GETSUBSTYLESSTART = ... # type: int
    SCI_GETSUBSTYLESLENGTH = ... # type: int
    SCI_GETSTYLEFROMSUBSTYLE = ... # type: int
    SCI_GETPRIMARYSTYLEFROMSTYLE = ... # type: int
    SCI_FREESUBSTYLES = ... # type: int
    SCI_SETIDENTIFIERS = ... # type: int
    SCI_DISTANCETOSECONDARYSTYLES = ... # type: int
    SCI_GETSUBSTYLEBASES = ... # type: int
    SCI_GETLINECHARACTERINDEX = ... # type: int
    SCI_ALLOCATELINECHARACTERINDEX = ... # type: int
    SCI_RELEASELINECHARACTERINDEX = ... # type: int
    SCI_LINEFROMINDEXPOSITION = ... # type: int
    SCI_INDEXPOSITIONFROMLINE = ... # type: int
    SCI_COUNTCODEUNITS = ... # type: int
    SCI_POSITIONRELATIVECODEUNITS = ... # type: int
    SCI_GETNAMEDSTYLES = ... # type: int
    SCI_NAMEOFSTYLE = ... # type: int
    SCI_TAGSOFSTYLE = ... # type: int
    SCI_DESCRIPTIONOFSTYLE = ... # type: int
    SCI_GETMOVEEXTENDSSELECTION = ... # type: int
    SCI_SETCOMMANDEVENTS = ... # type: int
    SCI_GETCOMMANDEVENTS = ... # type: int
    SCI_GETDOCUMENTOPTIONS = ... # type: int
    SCI_SETIDLESTYLING = ... # type: int
    SCI_GETIDLESTYLING = ... # type: int
    SCI_SETMARGINBACKN = ... # type: int
    SCI_GETMARGINBACKN = ... # type: int
    SCI_SETMARGINS = ... # type: int
    SCI_GETMARGINS = ... # type: int
    SCI_SETMOUSEWHEELCAPTURES = ... # type: int
    SCI_GETMOUSEWHEELCAPTURES = ... # type: int
    SCI_GETTABDRAWMODE = ... # type: int
    SCI_SETTABDRAWMODE = ... # type: int
    SCI_ISRANGEWORD = ... # type: int
    SCI_TARGETWHOLEDOCUMENT = ... # type: int
    SCI_FOLDDISPLAYTEXTSETSTYLE = ... # type: int
    SCI_TOGGLEFOLDSHOWTEXT = ... # type: int
    SCI_MULTIEDGEADDLINE = ... # type: int
    SCI_MULTIEDGECLEARALL = ... # type: int
    SCI_MULTIPLESELECTADDNEXT = ... # type: int
    SCI_MULTIPLESELECTADDEACH = ... # type: int
    SCI_SETACCESSIBILITY = ... # type: int
    SCI_GETACCESSIBILITY = ... # type: int
    SCI_SETCARETLINEFRAME = ... # type: int
    SCI_GETCARETLINEFRAME = ... # type: int
    SCI_LINEREVERSE = ... # type: int

    def __init__(self, parent: typing.Optional[QtWidgets.QWidget] = ...) -> None: ...

    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def resizeEvent(self, e: QtGui.QResizeEvent) -> None: ...
    def paintEvent(self, e: QtGui.QPaintEvent) -> None: ...
    def mouseReleaseEvent(self, e: QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, e: QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, e: QtGui.QMouseEvent) -> None: ...
    def mouseDoubleClickEvent(self, e: QtGui.QMouseEvent) -> None: ...
    def inputMethodQuery(self, query: QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def inputMethodEvent(self, e: QtGui.QInputMethodEvent) -> None: ...
    def keyPressEvent(self, e: QtGui.QKeyEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, e: QtGui.QFocusEvent) -> None: ...
    def focusInEvent(self, e: QtGui.QFocusEvent) -> None: ...
    def dropEvent(self, e: QtGui.QDropEvent) -> None: ...
    def dragMoveEvent(self, e: QtGui.QDragMoveEvent) -> None: ...
    def dragLeaveEvent(self, e: QtGui.QDragLeaveEvent) -> None: ...
    def dragEnterEvent(self, e: QtGui.QDragEnterEvent) -> None: ...
    def contextMenuEvent(self, e: QtGui.QContextMenuEvent) -> None: ...
    def changeEvent(self, e: QtCore.QEvent) -> None: ...
    def toMimeData(self, text: typing.Union[QtCore.QByteArray, bytes, bytearray], rectangular: bool) -> QtCore.QMimeData: ...
    def fromMimeData(self, source: QtCore.QMimeData) -> typing.Tuple[QtCore.QByteArray, bool]: ...
    def canInsertFromMimeData(self, source: QtCore.QMimeData) -> bool: ...
    def SCN_ZOOM(self) -> None: ...
    @typing.overload
    def SCN_USERLISTSELECTION(self, selection: str, id: int, ch: int, method: int, position: int) -> None: ...
    @typing.overload
    def SCN_USERLISTSELECTION(self, selection: str, id: int, ch: int, method: int) -> None: ...
    @typing.overload
    def SCN_USERLISTSELECTION(self, selection: str, id: int) -> None: ...
    def SCN_UPDATEUI(self, updated: int) -> None: ...
    def SCN_URIDROPPED(self, url: QtCore.QUrl) -> None: ...
    def SCN_STYLENEEDED(self, position: int) -> None: ...
    def SCN_SAVEPOINTREACHED(self) -> None: ...
    def SCN_SAVEPOINTLEFT(self) -> None: ...
    def SCN_PAINTED(self) -> None: ...
    def SCN_NEEDSHOWN(self, a0: int, a1: int) -> None: ...
    def SCN_MODIFYATTEMPTRO(self) -> None: ...
    def SCN_MODIFIED(self, a0: int, a1: int, a2: str, a3: int, a4: int, a5: int, a6: int, a7: int, a8: int, a9: int) -> None: ...
    def SCN_MARGINRIGHTCLICK(self, position: int, modifiers: int, margin: int) -> None: ...
    def SCN_MARGINCLICK(self, position: int, modifiers: int, margin: int) -> None: ...
    def SCN_MACRORECORD(self, a0: int, a1: int, a2: sip.voidptr) -> None: ...
    def SCN_INDICATORRELEASE(self, position: int, modifiers: int) -> None: ...
    def SCN_INDICATORCLICK(self, position: int, modifiers: int) -> None: ...
    def SCN_HOTSPOTRELEASECLICK(self, position: int, modifiers: int) -> None: ...
    def SCN_HOTSPOTDOUBLECLICK(self, position: int, modifiers: int) -> None: ...
    def SCN_HOTSPOTCLICK(self, position: int, modifiers: int) -> None: ...
    def SCN_FOCUSOUT(self) -> None: ...
    def SCN_FOCUSIN(self) -> None: ...
    def SCN_DWELLSTART(self, a0: int, a1: int, a2: int) -> None: ...
    def SCN_DWELLEND(self, a0: int, a1: int, a2: int) -> None: ...
    def SCN_DOUBLECLICK(self, position: int, line: int, modifiers: int) -> None: ...
    def SCN_CHARADDED(self, charadded: int) -> None: ...
    def SCN_CALLTIPCLICK(self, direction: int) -> None: ...
    def SCN_AUTOCSELECTIONCHANGE(self, selection: str, id: int, position: int) -> None: ...
    @typing.overload
    def SCN_AUTOCSELECTION(self, selection: str, position: int, ch: int, method: int) -> None: ...
    @typing.overload
    def SCN_AUTOCSELECTION(self, selection: str, position: int) -> None: ...
    def SCN_AUTOCCOMPLETED(self, selection: str, position: int, ch: int, method: int) -> None: ...
    def SCN_AUTOCCHARDELETED(self) -> None: ...
    def SCN_AUTOCCANCELLED(self) -> None: ...
    def SCEN_CHANGE(self) -> None: ...
    def QSCN_SELCHANGED(self, yes: bool) -> None: ...
    def SendScintillaPtrResult(self, msg: int) -> sip.voidptr: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int = ..., lParam: int = ...) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int, lParam: sip.voidptr) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int, lParam: bytes) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, lParam: bytes) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: bytes, lParam: bytes) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, cpMin: int, cpMax: int, lpstrText: bytes) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int, hdc: QtGui.QPainter, rc: QtCore.QRect, cpMin: int, cpMax: int) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int, lParam: QtGui.QPixmap) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int, lParam: QtGui.QImage) -> int: ...
    def replaceVerticalScrollBar(self, scrollBar: QtWidgets.QScrollBar) -> None: ...
    def replaceHorizontalScrollBar(self, scrollBar: QtWidgets.QScrollBar) -> None: ...
    @staticmethod
    def pool() -> 'QsciScintillaBase': ...


class QsciScintilla(QsciScintillaBase):

    class WrapIndentMode(int): ...
    WrapIndentFixed = ... # type: 'QsciScintilla.WrapIndentMode'
    WrapIndentSame = ... # type: 'QsciScintilla.WrapIndentMode'
    WrapIndentIndented = ... # type: 'QsciScintilla.WrapIndentMode'
    WrapIndentDeeplyIndented = ... # type: 'QsciScintilla.WrapIndentMode'

    class WrapVisualFlag(int): ...
    WrapFlagNone = ... # type: 'QsciScintilla.WrapVisualFlag'
    WrapFlagByText = ... # type: 'QsciScintilla.WrapVisualFlag'
    WrapFlagByBorder = ... # type: 'QsciScintilla.WrapVisualFlag'
    WrapFlagInMargin = ... # type: 'QsciScintilla.WrapVisualFlag'

    class WrapMode(int): ...
    WrapNone = ... # type: 'QsciScintilla.WrapMode'
    WrapWord = ... # type: 'QsciScintilla.WrapMode'
    WrapCharacter = ... # type: 'QsciScintilla.WrapMode'
    WrapWhitespace = ... # type: 'QsciScintilla.WrapMode'

    class WhitespaceVisibility(int): ...
    WsInvisible = ... # type: 'QsciScintilla.WhitespaceVisibility'
    WsVisible = ... # type: 'QsciScintilla.WhitespaceVisibility'
    WsVisibleAfterIndent = ... # type: 'QsciScintilla.WhitespaceVisibility'
    WsVisibleOnlyInIndent = ... # type: 'QsciScintilla.WhitespaceVisibility'

    class TabDrawMode(int): ...
    TabLongArrow = ... # type: 'QsciScintilla.TabDrawMode'
    TabStrikeOut = ... # type: 'QsciScintilla.TabDrawMode'

    class MarkerSymbol(int): ...
    Circle = ... # type: 'QsciScintilla.MarkerSymbol'
    Rectangle = ... # type: 'QsciScintilla.MarkerSymbol'
    RightTriangle = ... # type: 'QsciScintilla.MarkerSymbol'
    SmallRectangle = ... # type: 'QsciScintilla.MarkerSymbol'
    RightArrow = ... # type: 'QsciScintilla.MarkerSymbol'
    Invisible = ... # type: 'QsciScintilla.MarkerSymbol'
    DownTriangle = ... # type: 'QsciScintilla.MarkerSymbol'
    Minus = ... # type: 'QsciScintilla.MarkerSymbol'
    Plus = ... # type: 'QsciScintilla.MarkerSymbol'
    VerticalLine = ... # type: 'QsciScintilla.MarkerSymbol'
    BottomLeftCorner = ... # type: 'QsciScintilla.MarkerSymbol'
    LeftSideSplitter = ... # type: 'QsciScintilla.MarkerSymbol'
    BoxedPlus = ... # type: 'QsciScintilla.MarkerSymbol'
    BoxedPlusConnected = ... # type: 'QsciScintilla.MarkerSymbol'
    BoxedMinus = ... # type: 'QsciScintilla.MarkerSymbol'
    BoxedMinusConnected = ... # type: 'QsciScintilla.MarkerSymbol'
    RoundedBottomLeftCorner = ... # type: 'QsciScintilla.MarkerSymbol'
    LeftSideRoundedSplitter = ... # type: 'QsciScintilla.MarkerSymbol'
    CircledPlus = ... # type: 'QsciScintilla.MarkerSymbol'
    CircledPlusConnected = ... # type: 'QsciScintilla.MarkerSymbol'
    CircledMinus = ... # type: 'QsciScintilla.MarkerSymbol'
    CircledMinusConnected = ... # type: 'QsciScintilla.MarkerSymbol'
    Background = ... # type: 'QsciScintilla.MarkerSymbol'
    ThreeDots = ... # type: 'QsciScintilla.MarkerSymbol'
    ThreeRightArrows = ... # type: 'QsciScintilla.MarkerSymbol'
    FullRectangle = ... # type: 'QsciScintilla.MarkerSymbol'
    LeftRectangle = ... # type: 'QsciScintilla.MarkerSymbol'
    Underline = ... # type: 'QsciScintilla.MarkerSymbol'
    Bookmark = ... # type: 'QsciScintilla.MarkerSymbol'

    class MarginType(int): ...
    SymbolMargin = ... # type: 'QsciScintilla.MarginType'
    SymbolMarginDefaultForegroundColor = ... # type: 'QsciScintilla.MarginType'
    SymbolMarginDefaultBackgroundColor = ... # type: 'QsciScintilla.MarginType'
    NumberMargin = ... # type: 'QsciScintilla.MarginType'
    TextMargin = ... # type: 'QsciScintilla.MarginType'
    TextMarginRightJustified = ... # type: 'QsciScintilla.MarginType'
    SymbolMarginColor = ... # type: 'QsciScintilla.MarginType'

    MoNone = ... # type: int
    MoSublineSelect = ... # type: int

    class IndicatorStyle(int): ...
    PlainIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    SquiggleIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    TTIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    DiagonalIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    StrikeIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    HiddenIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    BoxIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    RoundBoxIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    StraightBoxIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    FullBoxIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    DashesIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    DotsIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    SquiggleLowIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    DotBoxIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    SquigglePixmapIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    ThickCompositionIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    ThinCompositionIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    TextColorIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    TriangleIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    TriangleCharacterIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    GradientIndicator = ... # type: 'QsciScintilla.IndicatorStyle'
    CentreGradientIndicator = ... # type: 'QsciScintilla.IndicatorStyle'

    class FoldStyle(int): ...
    NoFoldStyle = ... # type: 'QsciScintilla.FoldStyle'
    PlainFoldStyle = ... # type: 'QsciScintilla.FoldStyle'
    CircledFoldStyle = ... # type: 'QsciScintilla.FoldStyle'
    BoxedFoldStyle = ... # type: 'QsciScintilla.FoldStyle'
    CircledTreeFoldStyle = ... # type: 'QsciScintilla.FoldStyle'
    BoxedTreeFoldStyle = ... # type: 'QsciScintilla.FoldStyle'

    class EolMode(int): ...
    EolWindows = ... # type: 'QsciScintilla.EolMode'
    EolUnix = ... # type: 'QsciScintilla.EolMode'
    EolMac = ... # type: 'QsciScintilla.EolMode'

    class EdgeMode(int): ...
    EdgeNone = ... # type: 'QsciScintilla.EdgeMode'
    EdgeLine = ... # type: 'QsciScintilla.EdgeMode'
    EdgeBackground = ... # type: 'QsciScintilla.EdgeMode'
    EdgeMultipleLines = ... # type: 'QsciScintilla.EdgeMode'

    class CallTipsStyle(int): ...
    CallTipsNone = ... # type: 'QsciScintilla.CallTipsStyle'
    CallTipsNoContext = ... # type: 'QsciScintilla.CallTipsStyle'
    CallTipsNoAutoCompletionContext = ... # type: 'QsciScintilla.CallTipsStyle'
    CallTipsContext = ... # type: 'QsciScintilla.CallTipsStyle'

    class CallTipsPosition(int): ...
    CallTipsBelowText = ... # type: 'QsciScintilla.CallTipsPosition'
    CallTipsAboveText = ... # type: 'QsciScintilla.CallTipsPosition'

    class BraceMatch(int): ...
    NoBraceMatch = ... # type: 'QsciScintilla.BraceMatch'
    StrictBraceMatch = ... # type: 'QsciScintilla.BraceMatch'
    SloppyBraceMatch = ... # type: 'QsciScintilla.BraceMatch'

    class AutoCompletionUseSingle(int): ...
    AcusNever = ... # type: 'QsciScintilla.AutoCompletionUseSingle'
    AcusExplicit = ... # type: 'QsciScintilla.AutoCompletionUseSingle'
    AcusAlways = ... # type: 'QsciScintilla.AutoCompletionUseSingle'

    class AutoCompletionSource(int): ...
    AcsNone = ... # type: 'QsciScintilla.AutoCompletionSource'
    AcsAll = ... # type: 'QsciScintilla.AutoCompletionSource'
    AcsDocument = ... # type: 'QsciScintilla.AutoCompletionSource'
    AcsAPIs = ... # type: 'QsciScintilla.AutoCompletionSource'

    class AnnotationDisplay(int): ...
    AnnotationHidden = ... # type: 'QsciScintilla.AnnotationDisplay'
    AnnotationStandard = ... # type: 'QsciScintilla.AnnotationDisplay'
    AnnotationBoxed = ... # type: 'QsciScintilla.AnnotationDisplay'
    AnnotationIndented = ... # type: 'QsciScintilla.AnnotationDisplay'

    AiMaintain = ... # type: int
    AiOpening = ... # type: int
    AiClosing = ... # type: int

    def __init__(self, parent: typing.Optional[QtWidgets.QWidget] = ...) -> None: ...

    def wheelEvent(self, event: QtGui.QWheelEvent) -> None: ...
    def contextMenuEvent(self, event: QtGui.QContextMenuEvent) -> None: ...
    def changeEvent(self, event: QtCore.QEvent) -> None: ...
    def event(self, event: QtCore.QEvent) -> bool: ...
    def userListActivated(self, id: int, string: str) -> None: ...
    def textChanged(self) -> None: ...
    def selectionChanged(self) -> None: ...
    def modificationChanged(self, m: bool) -> None: ...
    def modificationAttempted(self) -> None: ...
    def marginRightClicked(self, margin: int, line: int, state: typing.Union[QtCore.Qt.KeyboardModifiers, QtCore.Qt.KeyboardModifier]) -> None: ...
    def marginClicked(self, margin: int, line: int, state: typing.Union[QtCore.Qt.KeyboardModifiers, QtCore.Qt.KeyboardModifier]) -> None: ...
    def linesChanged(self) -> None: ...
    def indicatorReleased(self, line: int, index: int, state: typing.Union[QtCore.Qt.KeyboardModifiers, QtCore.Qt.KeyboardModifier]) -> None: ...
    def indicatorClicked(self, line: int, index: int, state: typing.Union[QtCore.Qt.KeyboardModifiers, QtCore.Qt.KeyboardModifier]) -> None: ...
    def copyAvailable(self, yes: bool) -> None: ...
    def cursorPositionChanged(self, line: int, index: int) -> None: ...
    def zoomTo(self, size: int) -> None: ...
    @typing.overload
    def zoomOut(self, range: int) -> None: ...
    @typing.overload
    def zoomOut(self) -> None: ...
    @typing.overload
    def zoomIn(self, range: int) -> None: ...
    @typing.overload
    def zoomIn(self) -> None: ...
    def unindent(self, line: int) -> None: ...
    def undo(self) -> None: ...
    def setWrapMode(self, mode: 'QsciScintilla.WrapMode') -> None: ...
    def setWhitespaceVisibility(self, mode: 'QsciScintilla.WhitespaceVisibility') -> None: ...
    def setUtf8(self, cp: bool) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTabWidth(self, width: int) -> None: ...
    def setTabIndents(self, indent: bool) -> None: ...
    def setSelectionForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setSelectionBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setSelection(self, lineFrom: int, indexFrom: int, lineTo: int, indexTo: int) -> None: ...
    def setReadOnly(self, ro: bool) -> None: ...
    def setPaper(self, c: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setModified(self, m: bool) -> None: ...
    @typing.overload
    def setMarginWidth(self, margin: int, width: int) -> None: ...
    @typing.overload
    def setMarginWidth(self, margin: int, s: str) -> None: ...
    def setMarginSensitivity(self, margin: int, sens: bool) -> None: ...
    def setMarginMarkerMask(self, margin: int, mask: int) -> None: ...
    def setMarginLineNumbers(self, margin: int, lnrs: bool) -> None: ...
    def setMarginsForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setMarginsFont(self, f: QtGui.QFont) -> None: ...
    def setMarginsBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setLexer(self, lexer: typing.Optional['QsciLexer'] = ...) -> None: ...
    def setIndentationWidth(self, width: int) -> None: ...
    def setIndentationsUseTabs(self, tabs: bool) -> None: ...
    def setIndentationGuidesForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setIndentationGuidesBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setIndentationGuides(self, enable: bool) -> None: ...
    def setIndentation(self, line: int, indentation: int) -> None: ...
    def clearFolds(self) -> None: ...
    def setFolding(self, fold: 'QsciScintilla.FoldStyle', margin: int = ...) -> None: ...
    def setEolVisibility(self, visible: bool) -> None: ...
    def setEolMode(self, mode: 'QsciScintilla.EolMode') -> None: ...
    def setCursorPosition(self, line: int, index: int) -> None: ...
    def setColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setCaretWidth(self, width: int) -> None: ...
    def setCaretLineVisible(self, enable: bool) -> None: ...
    def setCaretLineFrameWidth(self, width: int) -> None: ...
    def setCaretLineBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setCaretForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setBackspaceUnindents(self, unindent: bool) -> None: ...
    def setBraceMatching(self, bm: 'QsciScintilla.BraceMatch') -> None: ...
    def setAutoIndent(self, autoindent: bool) -> None: ...
    def setAutoCompletionUseSingle(self, single: 'QsciScintilla.AutoCompletionUseSingle') -> None: ...
    def setAutoCompletionThreshold(self, thresh: int) -> None: ...
    def setAutoCompletionSource(self, source: 'QsciScintilla.AutoCompletionSource') -> None: ...
    def setAutoCompletionShowSingle(self, single: bool) -> None: ...
    def setAutoCompletionReplaceWord(self, replace: bool) -> None: ...
    def setAutoCompletionCaseSensitivity(self, cs: bool) -> None: ...
    def selectToMatchingBrace(self) -> None: ...
    def selectAll(self, select: bool = ...) -> None: ...
    def resetSelectionForegroundColor(self) -> None: ...
    def resetSelectionBackgroundColor(self) -> None: ...
    def replaceSelectedText(self, text: str) -> None: ...
    def removeSelectedText(self) -> None: ...
    def redo(self) -> None: ...
    def paste(self) -> None: ...
    def moveToMatchingBrace(self) -> None: ...
    def insertAt(self, text: str, line: int, index: int) -> None: ...
    def insert(self, text: str) -> None: ...
    def indent(self, line: int) -> None: ...
    def foldLine(self, line: int) -> None: ...
    def foldAll(self, children: bool = ...) -> None: ...
    def ensureLineVisible(self, line: int) -> None: ...
    def ensureCursorVisible(self) -> None: ...
    def cut(self) -> None: ...
    def copy(self) -> None: ...
    def clear(self) -> None: ...
    def callTip(self) -> None: ...
    def autoCompleteFromDocument(self) -> None: ...
    def autoCompleteFromAPIs(self) -> None: ...
    def autoCompleteFromAll(self) -> None: ...
    def append(self, text: str) -> None: ...
    def write(self, io: QtCore.QIODevice) -> bool: ...
    def wrapIndentMode(self) -> 'QsciScintilla.WrapIndentMode': ...
    def wrapMode(self) -> 'QsciScintilla.WrapMode': ...
    def wordCharacters(self) -> str: ...
    def wordAtPoint(self, point: QtCore.QPoint) -> str: ...
    def wordAtLineIndex(self, line: int, index: int) -> str: ...
    def whitespaceVisibility(self) -> 'QsciScintilla.WhitespaceVisibility': ...
    def whitespaceSize(self) -> int: ...
    def textHeight(self, linenr: int) -> int: ...
    @typing.overload
    def text(self) -> str: ...
    @typing.overload
    def text(self, line: int) -> str: ...
    @typing.overload
    def text(self, start: int, end: int) -> str: ...
    def tabWidth(self) -> int: ...
    def tabIndents(self) -> bool: ...
    def tabDrawMode(self) -> 'QsciScintilla.TabDrawMode': ...
    def setTabDrawMode(self, mode: 'QsciScintilla.TabDrawMode') -> None: ...
    def standardCommands(self) -> 'QsciCommandSet': ...
    def showUserList(self, id: int, list: typing.Iterable[str]) -> None: ...
    def setWrapIndentMode(self, mode: 'QsciScintilla.WrapIndentMode') -> None: ...
    def setWhitespaceSize(self, size: int) -> None: ...
    def setWhitespaceForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setWhitespaceBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setOverwriteMode(self, overwrite: bool) -> None: ...
    def setExtraDescent(self, extra: int) -> None: ...
    def setExtraAscent(self, extra: int) -> None: ...
    def setSelectionToEol(self, filled: bool) -> None: ...
    def selectionToEol(self) -> bool: ...
    def selectedText(self) -> str: ...
    def setWrapVisualFlags(self, endFlag: 'QsciScintilla.WrapVisualFlag', startFlag: 'QsciScintilla.WrapVisualFlag' = ..., indent: int = ...) -> None: ...
    def resetUnmatchedBraceIndicator(self) -> None: ...
    def setUnmatchedBraceIndicator(self, indicatorNumber: int) -> None: ...
    def setUnmatchedBraceForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setUnmatchedBraceBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def resetMatchedBraceIndicator(self) -> None: ...
    def setMatchedBraceIndicator(self, indicatorNumber: int) -> None: ...
    def setMatchedBraceForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setMatchedBraceBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setMarkerForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], markerNumber: int = ...) -> None: ...
    def setMarkerBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], markerNumber: int = ...) -> None: ...
    def setMargins(self, margins: int) -> None: ...
    def clearMarginText(self, line: int = ...) -> None: ...
    def setMarginType(self, margin: int, type: 'QsciScintilla.MarginType') -> None: ...
    @typing.overload
    def setMarginText(self, line: int, text: str, style: int) -> None: ...
    @typing.overload
    def setMarginText(self, line: int, text: str, style: 'QsciStyle') -> None: ...
    @typing.overload
    def setMarginText(self, line: int, text: 'QsciStyledText') -> None: ...
    @typing.overload
    def setMarginText(self, line: int, text: typing.Iterable['QsciStyledText']) -> None: ...
    def setMarginOptions(self, options: int) -> None: ...
    def setMarginBackgroundColor(self, margin: int, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setIndicatorOutlineColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], indicatorNumber: int = ...) -> None: ...
    def setIndicatorHoverStyle(self, style: 'QsciScintilla.IndicatorStyle', indicatorNumber: int = ...) -> None: ...
    def setIndicatorHoverForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], indicatorNumber: int = ...) -> None: ...
    def setIndicatorForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], indicatorNumber: int = ...) -> None: ...
    def setIndicatorDrawUnder(self, under: bool, indicatorNumber: int = ...) -> None: ...
    def setHotspotWrap(self, enable: bool) -> None: ...
    def setHotspotUnderline(self, enable: bool) -> None: ...
    def setHotspotForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setHotspotBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setFont(self, f: QtGui.QFont) -> None: ...
    def setFirstVisibleLine(self, linenr: int) -> None: ...
    def setEdgeMode(self, mode: 'QsciScintilla.EdgeMode') -> None: ...
    def setEdgeColumn(self, colnr: int) -> None: ...
    def setEdgeColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def clearEdgeColumns(self) -> None: ...
    def addEdgeColumn(self, colnr: int, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setDocument(self, document: 'QsciDocument') -> None: ...
    def setContractedFolds(self, folds: typing.Iterable[int]) -> None: ...
    def setCallTipsVisible(self, nr: int) -> None: ...
    def setCallTipsStyle(self, style: 'QsciScintilla.CallTipsStyle') -> None: ...
    def setCallTipsPosition(self, position: 'QsciScintilla.CallTipsPosition') -> None: ...
    def setCallTipsHighlightColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setCallTipsForegroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setCallTipsBackgroundColor(self, col: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setAutoCompletionWordSeparators(self, separators: typing.Iterable[str]) -> None: ...
    def setAutoCompletionFillups(self, fillups: str) -> None: ...
    def setAutoCompletionFillupsEnabled(self, enabled: bool) -> None: ...
    def setAnnotationDisplay(self, display: 'QsciScintilla.AnnotationDisplay') -> None: ...
    def setFoldMarginColors(self, fore: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], back: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setScrollWidthTracking(self, enabled: bool) -> None: ...
    def scrollWidthTracking(self) -> bool: ...
    def setScrollWidth(self, pixelWidth: int) -> None: ...
    def scrollWidth(self) -> int: ...
    def resetHotspotForegroundColor(self) -> None: ...
    def resetHotspotBackgroundColor(self) -> None: ...
    def resetFoldMarginColors(self) -> None: ...
    def replace(self, replaceStr: str) -> None: ...
    @typing.overload
    def registerImage(self, id: int, pm: QtGui.QPixmap) -> None: ...
    @typing.overload
    def registerImage(self, id: int, im: QtGui.QImage) -> None: ...
    def recolor(self, start: int = ..., end: int = ...) -> None: ...
    def read(self, io: QtCore.QIODevice) -> bool: ...
    def positionFromLineIndex(self, line: int, index: int) -> int: ...
    def paper(self) -> QtGui.QColor: ...
    def overwriteMode(self) -> bool: ...
    def markerFindPrevious(self, linenr: int, mask: int) -> int: ...
    def markerFindNext(self, linenr: int, mask: int) -> int: ...
    def markerLine(self, mhandle: int) -> int: ...
    def markerDeleteHandle(self, mhandle: int) -> None: ...
    def markerDeleteAll(self, markerNumber: int = ...) -> None: ...
    def markerDelete(self, linenr: int, markerNumber: int = ...) -> None: ...
    def markersAtLine(self, linenr: int) -> int: ...
    def markerAdd(self, linenr: int, markerNumber: int) -> int: ...
    @typing.overload
    def markerDefine(self, sym: 'QsciScintilla.MarkerSymbol', markerNumber: int = ...) -> int: ...
    @typing.overload
    def markerDefine(self, ch: str, markerNumber: int = ...) -> int: ...
    @typing.overload
    def markerDefine(self, pm: QtGui.QPixmap, markerNumber: int = ...) -> int: ...
    @typing.overload
    def markerDefine(self, im: QtGui.QImage, markerNumber: int = ...) -> int: ...
    def margins(self) -> int: ...
    def marginWidth(self, margin: int) -> int: ...
    def marginType(self, margin: int) -> 'QsciScintilla.MarginType': ...
    def marginSensitivity(self, margin: int) -> bool: ...
    def marginOptions(self) -> int: ...
    def marginMarkerMask(self, margin: int) -> int: ...
    def marginLineNumbers(self, margin: int) -> bool: ...
    def marginBackgroundColor(self, margin: int) -> QtGui.QColor: ...
    def lexer(self) -> 'QsciLexer': ...
    def length(self) -> int: ...
    def lines(self) -> int: ...
    def lineLength(self, line: int) -> int: ...
    def lineIndexFromPosition(self, position: int) -> typing.Tuple[int, int]: ...
    def lineAt(self, pos: QtCore.QPoint) -> int: ...
    def isWordCharacter(self, ch: str) -> bool: ...
    def isUtf8(self) -> bool: ...
    def isUndoAvailable(self) -> bool: ...
    def isRedoAvailable(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def isModified(self) -> bool: ...
    def isListActive(self) -> bool: ...
    def isCallTipActive(self) -> bool: ...
    def indicatorDrawUnder(self, indicatorNumber: int) -> bool: ...
    def indicatorDefine(self, style: 'QsciScintilla.IndicatorStyle', indicatorNumber: int = ...) -> int: ...
    def fillIndicatorRange(self, lineFrom: int, indexFrom: int, lineTo: int, indexTo: int, indicatorNumber: int) -> None: ...
    def clearIndicatorRange(self, lineFrom: int, indexFrom: int, lineTo: int, indexTo: int, indicatorNumber: int) -> None: ...
    def indentationWidth(self) -> int: ...
    def indentationsUseTabs(self) -> bool: ...
    def indentationGuides(self) -> bool: ...
    def indentation(self, line: int) -> int: ...
    def hasSelectedText(self) -> bool: ...
    def getSelection(self) -> typing.Tuple[int, int, int, int]: ...
    def getCursorPosition(self) -> typing.Tuple[int, int]: ...
    def folding(self) -> 'QsciScintilla.FoldStyle': ...
    def firstVisibleLine(self) -> int: ...
    def findMatchingBrace(self, mode: 'QsciScintilla.BraceMatch') -> typing.Tuple[bool, int, int]: ...
    def findNext(self) -> bool: ...
    def findFirstInSelection(self, expr: str, re: bool, cs: bool, wo: bool, forward: bool = ..., show: bool = ..., posix: bool = ..., cxx11: bool = ...) -> bool: ...
    def findFirst(self, expr: str, re: bool, cs: bool, wo: bool, wrap: bool, forward: bool = ..., line: int = ..., index: int = ..., show: bool = ..., posix: bool = ..., cxx11: bool = ...) -> bool: ...
    def extraDescent(self) -> int: ...
    def extraAscent(self) -> int: ...
    def eolVisibility(self) -> bool: ...
    def eolMode(self) -> 'QsciScintilla.EolMode': ...
    def edgeMode(self) -> 'QsciScintilla.EdgeMode': ...
    def edgeColumn(self) -> int: ...
    def edgeColor(self) -> QtGui.QColor: ...
    def endUndoAction(self) -> None: ...
    def document(self) -> 'QsciDocument': ...
    def createStandardContextMenu(self) -> QtWidgets.QMenu: ...
    def convertEols(self, mode: 'QsciScintilla.EolMode') -> None: ...
    def contractedFolds(self) -> typing.List[int]: ...
    def color(self) -> QtGui.QColor: ...
    def clearRegisteredImages(self) -> None: ...
    def caseSensitive(self) -> bool: ...
    def cancelList(self) -> None: ...
    def cancelFind(self) -> None: ...
    def callTipsVisible(self) -> int: ...
    def callTipsStyle(self) -> 'QsciScintilla.CallTipsStyle': ...
    def callTipsPosition(self) -> 'QsciScintilla.CallTipsPosition': ...
    def bytes(self, start: int, end: int) -> QtCore.QByteArray: ...
    def braceMatching(self) -> 'QsciScintilla.BraceMatch': ...
    def beginUndoAction(self) -> None: ...
    def backspaceUnindents(self) -> bool: ...
    def autoIndent(self) -> bool: ...
    def autoCompletionUseSingle(self) -> 'QsciScintilla.AutoCompletionUseSingle': ...
    def autoCompletionThreshold(self) -> int: ...
    def autoCompletionSource(self) -> 'QsciScintilla.AutoCompletionSource': ...
    def autoCompletionShowSingle(self) -> bool: ...
    def autoCompletionReplaceWord(self) -> bool: ...
    def autoCompletionFillupsEnabled(self) -> bool: ...
    def autoCompletionCaseSensitivity(self) -> bool: ...
    def clearAnnotations(self, line: int = ...) -> None: ...
    def annotationDisplay(self) -> 'QsciScintilla.AnnotationDisplay': ...
    def annotation(self, line: int) -> str: ...
    @typing.overload
    def annotate(self, line: int, text: str, style: int) -> None: ...
    @typing.overload
    def annotate(self, line: int, text: str, style: 'QsciStyle') -> None: ...
    @typing.overload
    def annotate(self, line: int, text: 'QsciStyledText') -> None: ...
    @typing.overload
    def annotate(self, line: int, text: typing.Iterable['QsciStyledText']) -> None: ...
    def apiContext(self, pos: int) -> typing.Tuple[typing.List[str], int, int]: ...


class QsciAbstractAPIs(QtCore.QObject):

    def __init__(self, lexer: 'QsciLexer') -> None: ...

    def callTips(self, context: typing.Iterable[str], commas: int, style: QsciScintilla.CallTipsStyle, shifts: typing.Iterable[int]) -> typing.List[str]: ...
    def autoCompletionSelected(self, selection: str) -> None: ...
    def updateAutoCompletionList(self, context: typing.Iterable[str], list: typing.Iterable[str]) -> typing.List[str]: ...
    def lexer(self) -> 'QsciLexer': ...


class QsciAPIs(QsciAbstractAPIs):

    def __init__(self, lexer: 'QsciLexer') -> None: ...

    def apiPreparationFinished(self) -> None: ...
    def apiPreparationStarted(self) -> None: ...
    def apiPreparationCancelled(self) -> None: ...
    def callTips(self, context: typing.Iterable[str], commas: int, style: QsciScintilla.CallTipsStyle, shifts: typing.Iterable[int]) -> typing.List[str]: ...
    def autoCompletionSelected(self, selection: str) -> None: ...
    def updateAutoCompletionList(self, context: typing.Iterable[str], list: typing.Iterable[str]) -> typing.List[str]: ...
    def installedAPIFiles(self) -> typing.List[str]: ...
    def event(self, e: QtCore.QEvent) -> bool: ...
    def savePrepared(self, filename: str = ...) -> bool: ...
    def loadPrepared(self, filename: str = ...) -> bool: ...
    def isPrepared(self, filename: str = ...) -> bool: ...
    def defaultPreparedName(self) -> str: ...
    def cancelPreparation(self) -> None: ...
    def prepare(self) -> None: ...
    def remove(self, entry: str) -> None: ...
    def load(self, fname: str) -> bool: ...
    def clear(self) -> None: ...
    def add(self, entry: str) -> None: ...


class QsciCommand(sip.wrapper):

    class Command(int): ...
    LineDown = ... # type: 'QsciCommand.Command'
    LineDownExtend = ... # type: 'QsciCommand.Command'
    LineDownRectExtend = ... # type: 'QsciCommand.Command'
    LineScrollDown = ... # type: 'QsciCommand.Command'
    LineUp = ... # type: 'QsciCommand.Command'
    LineUpExtend = ... # type: 'QsciCommand.Command'
    LineUpRectExtend = ... # type: 'QsciCommand.Command'
    LineScrollUp = ... # type: 'QsciCommand.Command'
    ScrollToStart = ... # type: 'QsciCommand.Command'
    ScrollToEnd = ... # type: 'QsciCommand.Command'
    VerticalCentreCaret = ... # type: 'QsciCommand.Command'
    ParaDown = ... # type: 'QsciCommand.Command'
    ParaDownExtend = ... # type: 'QsciCommand.Command'
    ParaUp = ... # type: 'QsciCommand.Command'
    ParaUpExtend = ... # type: 'QsciCommand.Command'
    CharLeft = ... # type: 'QsciCommand.Command'
    CharLeftExtend = ... # type: 'QsciCommand.Command'
    CharLeftRectExtend = ... # type: 'QsciCommand.Command'
    CharRight = ... # type: 'QsciCommand.Command'
    CharRightExtend = ... # type: 'QsciCommand.Command'
    CharRightRectExtend = ... # type: 'QsciCommand.Command'
    WordLeft = ... # type: 'QsciCommand.Command'
    WordLeftExtend = ... # type: 'QsciCommand.Command'
    WordRight = ... # type: 'QsciCommand.Command'
    WordRightExtend = ... # type: 'QsciCommand.Command'
    WordLeftEnd = ... # type: 'QsciCommand.Command'
    WordLeftEndExtend = ... # type: 'QsciCommand.Command'
    WordRightEnd = ... # type: 'QsciCommand.Command'
    WordRightEndExtend = ... # type: 'QsciCommand.Command'
    WordPartLeft = ... # type: 'QsciCommand.Command'
    WordPartLeftExtend = ... # type: 'QsciCommand.Command'
    WordPartRight = ... # type: 'QsciCommand.Command'
    WordPartRightExtend = ... # type: 'QsciCommand.Command'
    Home = ... # type: 'QsciCommand.Command'
    HomeExtend = ... # type: 'QsciCommand.Command'
    HomeRectExtend = ... # type: 'QsciCommand.Command'
    HomeDisplay = ... # type: 'QsciCommand.Command'
    HomeDisplayExtend = ... # type: 'QsciCommand.Command'
    HomeWrap = ... # type: 'QsciCommand.Command'
    HomeWrapExtend = ... # type: 'QsciCommand.Command'
    VCHome = ... # type: 'QsciCommand.Command'
    VCHomeExtend = ... # type: 'QsciCommand.Command'
    VCHomeRectExtend = ... # type: 'QsciCommand.Command'
    VCHomeWrap = ... # type: 'QsciCommand.Command'
    VCHomeWrapExtend = ... # type: 'QsciCommand.Command'
    LineEnd = ... # type: 'QsciCommand.Command'
    LineEndExtend = ... # type: 'QsciCommand.Command'
    LineEndRectExtend = ... # type: 'QsciCommand.Command'
    LineEndDisplay = ... # type: 'QsciCommand.Command'
    LineEndDisplayExtend = ... # type: 'QsciCommand.Command'
    LineEndWrap = ... # type: 'QsciCommand.Command'
    LineEndWrapExtend = ... # type: 'QsciCommand.Command'
    DocumentStart = ... # type: 'QsciCommand.Command'
    DocumentStartExtend = ... # type: 'QsciCommand.Command'
    DocumentEnd = ... # type: 'QsciCommand.Command'
    DocumentEndExtend = ... # type: 'QsciCommand.Command'
    PageUp = ... # type: 'QsciCommand.Command'
    PageUpExtend = ... # type: 'QsciCommand.Command'
    PageUpRectExtend = ... # type: 'QsciCommand.Command'
    PageDown = ... # type: 'QsciCommand.Command'
    PageDownExtend = ... # type: 'QsciCommand.Command'
    PageDownRectExtend = ... # type: 'QsciCommand.Command'
    StutteredPageUp = ... # type: 'QsciCommand.Command'
    StutteredPageUpExtend = ... # type: 'QsciCommand.Command'
    StutteredPageDown = ... # type: 'QsciCommand.Command'
    StutteredPageDownExtend = ... # type: 'QsciCommand.Command'
    Delete = ... # type: 'QsciCommand.Command'
    DeleteBack = ... # type: 'QsciCommand.Command'
    DeleteBackNotLine = ... # type: 'QsciCommand.Command'
    DeleteWordLeft = ... # type: 'QsciCommand.Command'
    DeleteWordRight = ... # type: 'QsciCommand.Command'
    DeleteWordRightEnd = ... # type: 'QsciCommand.Command'
    DeleteLineLeft = ... # type: 'QsciCommand.Command'
    DeleteLineRight = ... # type: 'QsciCommand.Command'
    LineDelete = ... # type: 'QsciCommand.Command'
    LineCut = ... # type: 'QsciCommand.Command'
    LineCopy = ... # type: 'QsciCommand.Command'
    LineTranspose = ... # type: 'QsciCommand.Command'
    LineDuplicate = ... # type: 'QsciCommand.Command'
    SelectAll = ... # type: 'QsciCommand.Command'
    MoveSelectedLinesUp = ... # type: 'QsciCommand.Command'
    MoveSelectedLinesDown = ... # type: 'QsciCommand.Command'
    SelectionDuplicate = ... # type: 'QsciCommand.Command'
    SelectionLowerCase = ... # type: 'QsciCommand.Command'
    SelectionUpperCase = ... # type: 'QsciCommand.Command'
    SelectionCut = ... # type: 'QsciCommand.Command'
    SelectionCopy = ... # type: 'QsciCommand.Command'
    Paste = ... # type: 'QsciCommand.Command'
    EditToggleOvertype = ... # type: 'QsciCommand.Command'
    Newline = ... # type: 'QsciCommand.Command'
    Formfeed = ... # type: 'QsciCommand.Command'
    Tab = ... # type: 'QsciCommand.Command'
    Backtab = ... # type: 'QsciCommand.Command'
    Cancel = ... # type: 'QsciCommand.Command'
    Undo = ... # type: 'QsciCommand.Command'
    Redo = ... # type: 'QsciCommand.Command'
    ZoomIn = ... # type: 'QsciCommand.Command'
    ZoomOut = ... # type: 'QsciCommand.Command'
    ReverseLines = ... # type: 'QsciCommand.Command'

    def description(self) -> str: ...
    @staticmethod
    def validKey(key: int) -> bool: ...
    def alternateKey(self) -> int: ...
    def key(self) -> int: ...
    def setAlternateKey(self, altkey: int) -> None: ...
    def setKey(self, key: int) -> None: ...
    def execute(self) -> None: ...
    def command(self) -> 'QsciCommand.Command': ...


class QsciCommandSet(sip.wrapper):

    def find(self, command: QsciCommand.Command) -> QsciCommand: ...
    def boundTo(self, key: int) -> QsciCommand: ...
    def clearAlternateKeys(self) -> None: ...
    def clearKeys(self) -> None: ...
    def commands(self) -> typing.List[QsciCommand]: ...
    def writeSettings(self, qs: QtCore.QSettings, prefix: typing.Optional[str] = ...) -> bool: ...
    def readSettings(self, qs: QtCore.QSettings, prefix: typing.Optional[str] = ...) -> bool: ...


class QsciDocument(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'QsciDocument') -> None: ...


class QsciLexer(QtCore.QObject):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def propertyChanged(self, prop: str, val: str) -> None: ...
    def paperChanged(self, c: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], style: int) -> None: ...
    def fontChanged(self, f: QtGui.QFont, style: int) -> None: ...
    def eolFillChanged(self, eolfilled: bool, style: int) -> None: ...
    def colorChanged(self, c: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], style: int) -> None: ...
    def setPaper(self, c: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], style: int = ...) -> None: ...
    def setFont(self, f: QtGui.QFont, style: int = ...) -> None: ...
    def setEolFill(self, eolfill: bool, style: int = ...) -> None: ...
    def setColor(self, c: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], style: int = ...) -> None: ...
    def setAutoIndentStyle(self, autoindentstyle: int) -> None: ...
    def writeSettings(self, qs: QtCore.QSettings, prefix: typing.Optional[str] = ...) -> bool: ...
    def readSettings(self, qs: QtCore.QSettings, prefix: typing.Optional[str] = ...) -> bool: ...
    def wordCharacters(self) -> str: ...
    def styleBitsNeeded(self) -> int: ...
    def setDefaultPaper(self, c: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setDefaultFont(self, f: QtGui.QFont) -> None: ...
    def setDefaultColor(self, c: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def setAPIs(self, apis: QsciAbstractAPIs) -> None: ...
    def refreshProperties(self) -> None: ...
    def editor(self) -> QsciScintilla: ...
    def defaultStyle(self) -> int: ...
    @typing.overload
    def defaultPaper(self) -> QtGui.QColor: ...
    @typing.overload
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    @typing.overload
    def defaultFont(self) -> QtGui.QFont: ...
    @typing.overload
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    @typing.overload
    def defaultColor(self) -> QtGui.QColor: ...
    @typing.overload
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def paper(self, style: int) -> QtGui.QColor: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def indentationGuideView(self) -> int: ...
    def font(self, style: int) -> QtGui.QFont: ...
    def eolFill(self, style: int) -> bool: ...
    def color(self, style: int) -> QtGui.QColor: ...
    def caseSensitive(self) -> bool: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> typing.Tuple[str, int]: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def blockLookback(self) -> int: ...
    def blockEnd(self) -> typing.Tuple[str, int]: ...
    def autoIndentStyle(self) -> int: ...
    def autoCompletionWordSeparators(self) -> typing.List[str]: ...
    def autoCompletionFillups(self) -> str: ...
    def apis(self) -> QsciAbstractAPIs: ...
    def lexerId(self) -> int: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerAVS(QsciLexer):

    Default = ... # type: int
    BlockComment = ... # type: int
    NestedBlockComment = ... # type: int
    LineComment = ... # type: int
    Number = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    String = ... # type: int
    TripleString = ... # type: int
    Keyword = ... # type: int
    Filter = ... # type: int
    Plugin = ... # type: int
    Function = ... # type: int
    ClipProperty = ... # type: int
    KeywordSet6 = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerBash(QsciLexer):

    Default = ... # type: int
    Error = ... # type: int
    Comment = ... # type: int
    Number = ... # type: int
    Keyword = ... # type: int
    DoubleQuotedString = ... # type: int
    SingleQuotedString = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    Scalar = ... # type: int
    ParameterExpansion = ... # type: int
    Backticks = ... # type: int
    HereDocumentDelimiter = ... # type: int
    SingleQuotedHereDocument = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerBatch(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    Keyword = ... # type: int
    Label = ... # type: int
    HideCommandChar = ... # type: int
    ExternalCommand = ... # type: int
    Variable = ... # type: int
    Operator = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def caseSensitive(self) -> bool: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerCMake(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    String = ... # type: int
    StringLeftQuote = ... # type: int
    StringRightQuote = ... # type: int
    Function = ... # type: int
    Variable = ... # type: int
    Label = ... # type: int
    KeywordSet3 = ... # type: int
    BlockWhile = ... # type: int
    BlockForeach = ... # type: int
    BlockIf = ... # type: int
    BlockMacro = ... # type: int
    StringVariable = ... # type: int
    Number = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def foldAtElse(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerCoffeeScript(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    CommentLine = ... # type: int
    CommentDoc = ... # type: int
    Number = ... # type: int
    Keyword = ... # type: int
    DoubleQuotedString = ... # type: int
    SingleQuotedString = ... # type: int
    UUID = ... # type: int
    PreProcessor = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    UnclosedString = ... # type: int
    VerbatimString = ... # type: int
    Regex = ... # type: int
    CommentLineDoc = ... # type: int
    KeywordSet2 = ... # type: int
    CommentDocKeyword = ... # type: int
    CommentDocKeywordError = ... # type: int
    GlobalClass = ... # type: int
    CommentBlock = ... # type: int
    BlockRegex = ... # type: int
    BlockRegexComment = ... # type: int
    InstanceProperty = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setStylePreprocessor(self, style: bool) -> None: ...
    def stylePreprocessor(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def setDollarsAllowed(self, allowed: bool) -> None: ...
    def dollarsAllowed(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> typing.Tuple[str, int]: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def blockEnd(self) -> typing.Tuple[str, int]: ...
    def autoCompletionWordSeparators(self) -> typing.List[str]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerCPP(QsciLexer):

    Default = ... # type: int
    InactiveDefault = ... # type: int
    Comment = ... # type: int
    InactiveComment = ... # type: int
    CommentLine = ... # type: int
    InactiveCommentLine = ... # type: int
    CommentDoc = ... # type: int
    InactiveCommentDoc = ... # type: int
    Number = ... # type: int
    InactiveNumber = ... # type: int
    Keyword = ... # type: int
    InactiveKeyword = ... # type: int
    DoubleQuotedString = ... # type: int
    InactiveDoubleQuotedString = ... # type: int
    SingleQuotedString = ... # type: int
    InactiveSingleQuotedString = ... # type: int
    UUID = ... # type: int
    InactiveUUID = ... # type: int
    PreProcessor = ... # type: int
    InactivePreProcessor = ... # type: int
    Operator = ... # type: int
    InactiveOperator = ... # type: int
    Identifier = ... # type: int
    InactiveIdentifier = ... # type: int
    UnclosedString = ... # type: int
    InactiveUnclosedString = ... # type: int
    VerbatimString = ... # type: int
    InactiveVerbatimString = ... # type: int
    Regex = ... # type: int
    InactiveRegex = ... # type: int
    CommentLineDoc = ... # type: int
    InactiveCommentLineDoc = ... # type: int
    KeywordSet2 = ... # type: int
    InactiveKeywordSet2 = ... # type: int
    CommentDocKeyword = ... # type: int
    InactiveCommentDocKeyword = ... # type: int
    CommentDocKeywordError = ... # type: int
    InactiveCommentDocKeywordError = ... # type: int
    GlobalClass = ... # type: int
    InactiveGlobalClass = ... # type: int
    RawString = ... # type: int
    InactiveRawString = ... # type: int
    TripleQuotedVerbatimString = ... # type: int
    InactiveTripleQuotedVerbatimString = ... # type: int
    HashQuotedString = ... # type: int
    InactiveHashQuotedString = ... # type: int
    PreProcessorComment = ... # type: int
    InactivePreProcessorComment = ... # type: int
    PreProcessorCommentLineDoc = ... # type: int
    InactivePreProcessorCommentLineDoc = ... # type: int
    UserLiteral = ... # type: int
    InactiveUserLiteral = ... # type: int
    TaskMarker = ... # type: int
    InactiveTaskMarker = ... # type: int
    EscapeSequence = ... # type: int
    InactiveEscapeSequence = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ..., caseInsensitiveKeywords: bool = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setStylePreprocessor(self, style: bool) -> None: ...
    def setFoldPreprocessor(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def verbatimStringEscapeSequencesAllowed(self) -> bool: ...
    def setVerbatimStringEscapeSequencesAllowed(self, allowed: bool) -> None: ...
    def highlightEscapeSequences(self) -> bool: ...
    def setHighlightEscapeSequences(self, enabled: bool) -> None: ...
    def highlightBackQuotedStrings(self) -> bool: ...
    def setHighlightBackQuotedStrings(self, enabled: bool) -> None: ...
    def highlightHashQuotedStrings(self) -> bool: ...
    def setHighlightHashQuotedStrings(self, enable: bool) -> None: ...
    def highlightTripleQuotedStrings(self) -> bool: ...
    def setHighlightTripleQuotedStrings(self, enable: bool) -> None: ...
    def dollarsAllowed(self) -> bool: ...
    def setDollarsAllowed(self, allowed: bool) -> None: ...
    def stylePreprocessor(self) -> bool: ...
    def foldPreprocessor(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def foldAtElse(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> typing.Tuple[str, int]: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def blockEnd(self) -> typing.Tuple[str, int]: ...
    def autoCompletionWordSeparators(self) -> typing.List[str]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerCSharp(QsciLexerCPP):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def language(self) -> str: ...


class QsciLexerCSS(QsciLexer):

    Default = ... # type: int
    Tag = ... # type: int
    ClassSelector = ... # type: int
    PseudoClass = ... # type: int
    UnknownPseudoClass = ... # type: int
    Operator = ... # type: int
    CSS1Property = ... # type: int
    UnknownProperty = ... # type: int
    Value = ... # type: int
    Comment = ... # type: int
    IDSelector = ... # type: int
    Important = ... # type: int
    AtRule = ... # type: int
    DoubleQuotedString = ... # type: int
    SingleQuotedString = ... # type: int
    CSS2Property = ... # type: int
    Attribute = ... # type: int
    CSS3Property = ... # type: int
    PseudoElement = ... # type: int
    ExtendedCSSProperty = ... # type: int
    ExtendedPseudoClass = ... # type: int
    ExtendedPseudoElement = ... # type: int
    MediaRule = ... # type: int
    Variable = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def SCSSLanguage(self) -> bool: ...
    def setSCSSLanguage(self, enable: bool) -> None: ...
    def LessLanguage(self) -> bool: ...
    def setLessLanguage(self, enable: bool) -> None: ...
    def HSSLanguage(self) -> bool: ...
    def setHSSLanguage(self, enable: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def blockEnd(self) -> typing.Tuple[str, int]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerCustom(QsciLexer):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def styleText(self, start: int, end: int) -> None: ...
    def startStyling(self, pos: int, styleBits: int = ...) -> None: ...
    @typing.overload
    def setStyling(self, length: int, style: int) -> None: ...
    @typing.overload
    def setStyling(self, length: int, style: 'QsciStyle') -> None: ...
    def styleBitsNeeded(self) -> int: ...
    def setEditor(self, editor: QsciScintilla) -> None: ...


class QsciLexerD(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    CommentLine = ... # type: int
    CommentDoc = ... # type: int
    CommentNested = ... # type: int
    Number = ... # type: int
    Keyword = ... # type: int
    KeywordSecondary = ... # type: int
    KeywordDoc = ... # type: int
    Typedefs = ... # type: int
    String = ... # type: int
    UnclosedString = ... # type: int
    Character = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    CommentLineDoc = ... # type: int
    CommentDocKeyword = ... # type: int
    CommentDocKeywordError = ... # type: int
    BackquoteString = ... # type: int
    RawString = ... # type: int
    KeywordSet5 = ... # type: int
    KeywordSet6 = ... # type: int
    KeywordSet7 = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def foldAtElse(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> typing.Tuple[str, int]: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def blockEnd(self) -> typing.Tuple[str, int]: ...
    def autoCompletionWordSeparators(self) -> typing.List[str]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerDiff(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    Command = ... # type: int
    Header = ... # type: int
    Position = ... # type: int
    LineRemoved = ... # type: int
    LineAdded = ... # type: int
    LineChanged = ... # type: int
    AddingPatchAdded = ... # type: int
    RemovingPatchAdded = ... # type: int
    AddingPatchRemoved = ... # type: int
    RemovingPatchRemoved = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerFortran77(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    Number = ... # type: int
    SingleQuotedString = ... # type: int
    DoubleQuotedString = ... # type: int
    UnclosedString = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    Keyword = ... # type: int
    IntrinsicFunction = ... # type: int
    ExtendedFunction = ... # type: int
    PreProcessor = ... # type: int
    DottedOperator = ... # type: int
    Label = ... # type: int
    Continuation = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerFortran(QsciLexerFortran77):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def keywords(self, set: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerHTML(QsciLexer):

    Default = ... # type: int
    Tag = ... # type: int
    UnknownTag = ... # type: int
    Attribute = ... # type: int
    UnknownAttribute = ... # type: int
    HTMLNumber = ... # type: int
    HTMLDoubleQuotedString = ... # type: int
    HTMLSingleQuotedString = ... # type: int
    OtherInTag = ... # type: int
    HTMLComment = ... # type: int
    Entity = ... # type: int
    XMLTagEnd = ... # type: int
    XMLStart = ... # type: int
    XMLEnd = ... # type: int
    Script = ... # type: int
    ASPAtStart = ... # type: int
    ASPStart = ... # type: int
    CDATA = ... # type: int
    PHPStart = ... # type: int
    HTMLValue = ... # type: int
    ASPXCComment = ... # type: int
    SGMLDefault = ... # type: int
    SGMLCommand = ... # type: int
    SGMLParameter = ... # type: int
    SGMLDoubleQuotedString = ... # type: int
    SGMLSingleQuotedString = ... # type: int
    SGMLError = ... # type: int
    SGMLSpecial = ... # type: int
    SGMLEntity = ... # type: int
    SGMLComment = ... # type: int
    SGMLParameterComment = ... # type: int
    SGMLBlockDefault = ... # type: int
    JavaScriptStart = ... # type: int
    JavaScriptDefault = ... # type: int
    JavaScriptComment = ... # type: int
    JavaScriptCommentLine = ... # type: int
    JavaScriptCommentDoc = ... # type: int
    JavaScriptNumber = ... # type: int
    JavaScriptWord = ... # type: int
    JavaScriptKeyword = ... # type: int
    JavaScriptDoubleQuotedString = ... # type: int
    JavaScriptSingleQuotedString = ... # type: int
    JavaScriptSymbol = ... # type: int
    JavaScriptUnclosedString = ... # type: int
    JavaScriptRegex = ... # type: int
    ASPJavaScriptStart = ... # type: int
    ASPJavaScriptDefault = ... # type: int
    ASPJavaScriptComment = ... # type: int
    ASPJavaScriptCommentLine = ... # type: int
    ASPJavaScriptCommentDoc = ... # type: int
    ASPJavaScriptNumber = ... # type: int
    ASPJavaScriptWord = ... # type: int
    ASPJavaScriptKeyword = ... # type: int
    ASPJavaScriptDoubleQuotedString = ... # type: int
    ASPJavaScriptSingleQuotedString = ... # type: int
    ASPJavaScriptSymbol = ... # type: int
    ASPJavaScriptUnclosedString = ... # type: int
    ASPJavaScriptRegex = ... # type: int
    VBScriptStart = ... # type: int
    VBScriptDefault = ... # type: int
    VBScriptComment = ... # type: int
    VBScriptNumber = ... # type: int
    VBScriptKeyword = ... # type: int
    VBScriptString = ... # type: int
    VBScriptIdentifier = ... # type: int
    VBScriptUnclosedString = ... # type: int
    ASPVBScriptStart = ... # type: int
    ASPVBScriptDefault = ... # type: int
    ASPVBScriptComment = ... # type: int
    ASPVBScriptNumber = ... # type: int
    ASPVBScriptKeyword = ... # type: int
    ASPVBScriptString = ... # type: int
    ASPVBScriptIdentifier = ... # type: int
    ASPVBScriptUnclosedString = ... # type: int
    PythonStart = ... # type: int
    PythonDefault = ... # type: int
    PythonComment = ... # type: int
    PythonNumber = ... # type: int
    PythonDoubleQuotedString = ... # type: int
    PythonSingleQuotedString = ... # type: int
    PythonKeyword = ... # type: int
    PythonTripleSingleQuotedString = ... # type: int
    PythonTripleDoubleQuotedString = ... # type: int
    PythonClassName = ... # type: int
    PythonFunctionMethodName = ... # type: int
    PythonOperator = ... # type: int
    PythonIdentifier = ... # type: int
    ASPPythonStart = ... # type: int
    ASPPythonDefault = ... # type: int
    ASPPythonComment = ... # type: int
    ASPPythonNumber = ... # type: int
    ASPPythonDoubleQuotedString = ... # type: int
    ASPPythonSingleQuotedString = ... # type: int
    ASPPythonKeyword = ... # type: int
    ASPPythonTripleSingleQuotedString = ... # type: int
    ASPPythonTripleDoubleQuotedString = ... # type: int
    ASPPythonClassName = ... # type: int
    ASPPythonFunctionMethodName = ... # type: int
    ASPPythonOperator = ... # type: int
    ASPPythonIdentifier = ... # type: int
    PHPDefault = ... # type: int
    PHPDoubleQuotedString = ... # type: int
    PHPSingleQuotedString = ... # type: int
    PHPKeyword = ... # type: int
    PHPNumber = ... # type: int
    PHPVariable = ... # type: int
    PHPComment = ... # type: int
    PHPCommentLine = ... # type: int
    PHPDoubleQuotedVariable = ... # type: int
    PHPOperator = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setCaseSensitiveTags(self, sens: bool) -> None: ...
    def setFoldPreprocessor(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def makoTemplates(self) -> bool: ...
    def setMakoTemplates(self, enable: bool) -> None: ...
    def foldScriptHeredocs(self) -> bool: ...
    def setFoldScriptHeredocs(self, fold: bool) -> None: ...
    def foldScriptComments(self) -> bool: ...
    def setFoldScriptComments(self, fold: bool) -> None: ...
    def foldPreprocessor(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def djangoTemplates(self) -> bool: ...
    def setDjangoTemplates(self, enable: bool) -> None: ...
    def caseSensitiveTags(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def caseSensitive(self) -> bool: ...
    def autoCompletionFillups(self) -> str: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerIDL(QsciLexerCPP):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def language(self) -> str: ...


class QsciLexerJava(QsciLexerCPP):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def keywords(self, set: int) -> str: ...
    def language(self) -> str: ...


class QsciLexerJavaScript(QsciLexerCPP):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def language(self) -> str: ...


class QsciLexerJSON(QsciLexer):

    Default = ... # type: int
    Number = ... # type: int
    String = ... # type: int
    UnclosedString = ... # type: int
    Property = ... # type: int
    EscapeSequence = ... # type: int
    CommentLine = ... # type: int
    CommentBlock = ... # type: int
    Operator = ... # type: int
    IRI = ... # type: int
    IRICompact = ... # type: int
    Keyword = ... # type: int
    KeywordLD = ... # type: int
    Error = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def highlightEscapeSequences(self) -> bool: ...
    def setHighlightEscapeSequences(self, highlight: bool) -> None: ...
    def highlightComments(self) -> bool: ...
    def setHighlightComments(self, highlight: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerLua(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    LineComment = ... # type: int
    Number = ... # type: int
    Keyword = ... # type: int
    String = ... # type: int
    Character = ... # type: int
    LiteralString = ... # type: int
    Preprocessor = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    UnclosedString = ... # type: int
    BasicFunctions = ... # type: int
    StringTableMathsFunctions = ... # type: int
    CoroutinesIOSystemFacilities = ... # type: int
    KeywordSet5 = ... # type: int
    KeywordSet6 = ... # type: int
    KeywordSet7 = ... # type: int
    KeywordSet8 = ... # type: int
    Label = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def autoCompletionWordSeparators(self) -> typing.List[str]: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerMakefile(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    Preprocessor = ... # type: int
    Variable = ... # type: int
    Operator = ... # type: int
    Target = ... # type: int
    Error = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerMarkdown(QsciLexer):

    Default = ... # type: int
    Special = ... # type: int
    StrongEmphasisAsterisks = ... # type: int
    StrongEmphasisUnderscores = ... # type: int
    EmphasisAsterisks = ... # type: int
    EmphasisUnderscores = ... # type: int
    Header1 = ... # type: int
    Header2 = ... # type: int
    Header3 = ... # type: int
    Header4 = ... # type: int
    Header5 = ... # type: int
    Header6 = ... # type: int
    Prechar = ... # type: int
    UnorderedListItem = ... # type: int
    OrderedListItem = ... # type: int
    BlockQuote = ... # type: int
    StrikeOut = ... # type: int
    HorizontalRule = ... # type: int
    Link = ... # type: int
    CodeBackticks = ... # type: int
    CodeDoubleBackticks = ... # type: int
    CodeBlock = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def description(self, style: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerMatlab(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    Command = ... # type: int
    Number = ... # type: int
    Keyword = ... # type: int
    SingleQuotedString = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    DoubleQuotedString = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerOctave(QsciLexerMatlab):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def keywords(self, set: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerPascal(QsciLexer):

    Default = ... # type: int
    Identifier = ... # type: int
    Comment = ... # type: int
    CommentParenthesis = ... # type: int
    CommentLine = ... # type: int
    PreProcessor = ... # type: int
    PreProcessorParenthesis = ... # type: int
    Number = ... # type: int
    HexNumber = ... # type: int
    Keyword = ... # type: int
    SingleQuotedString = ... # type: int
    UnclosedString = ... # type: int
    Character = ... # type: int
    Operator = ... # type: int
    Asm = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldPreprocessor(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def smartHighlighting(self) -> bool: ...
    def setSmartHighlighting(self, enabled: bool) -> None: ...
    def foldPreprocessor(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> typing.Tuple[str, int]: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def blockEnd(self) -> typing.Tuple[str, int]: ...
    def autoCompletionWordSeparators(self) -> typing.List[str]: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerPerl(QsciLexer):

    Default = ... # type: int
    Error = ... # type: int
    Comment = ... # type: int
    POD = ... # type: int
    Number = ... # type: int
    Keyword = ... # type: int
    DoubleQuotedString = ... # type: int
    SingleQuotedString = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    Scalar = ... # type: int
    Array = ... # type: int
    Hash = ... # type: int
    SymbolTable = ... # type: int
    Regex = ... # type: int
    Substitution = ... # type: int
    Backticks = ... # type: int
    DataSection = ... # type: int
    HereDocumentDelimiter = ... # type: int
    SingleQuotedHereDocument = ... # type: int
    DoubleQuotedHereDocument = ... # type: int
    BacktickHereDocument = ... # type: int
    QuotedStringQ = ... # type: int
    QuotedStringQQ = ... # type: int
    QuotedStringQX = ... # type: int
    QuotedStringQR = ... # type: int
    QuotedStringQW = ... # type: int
    PODVerbatim = ... # type: int
    SubroutinePrototype = ... # type: int
    FormatIdentifier = ... # type: int
    FormatBody = ... # type: int
    DoubleQuotedStringVar = ... # type: int
    Translation = ... # type: int
    RegexVar = ... # type: int
    SubstitutionVar = ... # type: int
    BackticksVar = ... # type: int
    DoubleQuotedHereDocumentVar = ... # type: int
    BacktickHereDocumentVar = ... # type: int
    QuotedStringQQVar = ... # type: int
    QuotedStringQXVar = ... # type: int
    QuotedStringQRVar = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldPODBlocks(self) -> bool: ...
    def setFoldPODBlocks(self, fold: bool) -> None: ...
    def foldPackages(self) -> bool: ...
    def setFoldPackages(self, fold: bool) -> None: ...
    def foldAtElse(self) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def blockEnd(self) -> typing.Tuple[str, int]: ...
    def autoCompletionWordSeparators(self) -> typing.List[str]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerPostScript(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    DSCComment = ... # type: int
    DSCCommentValue = ... # type: int
    Number = ... # type: int
    Name = ... # type: int
    Keyword = ... # type: int
    Literal = ... # type: int
    ImmediateEvalLiteral = ... # type: int
    ArrayParenthesis = ... # type: int
    DictionaryParenthesis = ... # type: int
    ProcedureParenthesis = ... # type: int
    Text = ... # type: int
    HexString = ... # type: int
    Base85String = ... # type: int
    BadStringCharacter = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setLevel(self, level: int) -> None: ...
    def setTokenize(self, tokenize: bool) -> None: ...
    def foldAtElse(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def level(self) -> int: ...
    def tokenize(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerPO(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    MessageId = ... # type: int
    MessageIdText = ... # type: int
    MessageString = ... # type: int
    MessageStringText = ... # type: int
    MessageContext = ... # type: int
    MessageContextText = ... # type: int
    Fuzzy = ... # type: int
    ProgrammerComment = ... # type: int
    Reference = ... # type: int
    Flags = ... # type: int
    MessageIdTextEOL = ... # type: int
    MessageStringTextEOL = ... # type: int
    MessageContextTextEOL = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerPOV(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    CommentLine = ... # type: int
    Number = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    String = ... # type: int
    UnclosedString = ... # type: int
    Directive = ... # type: int
    BadDirective = ... # type: int
    ObjectsCSGAppearance = ... # type: int
    TypesModifiersItems = ... # type: int
    PredefinedIdentifiers = ... # type: int
    PredefinedFunctions = ... # type: int
    KeywordSet6 = ... # type: int
    KeywordSet7 = ... # type: int
    KeywordSet8 = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldDirectives(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldDirectives(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerProperties(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    Section = ... # type: int
    Assignment = ... # type: int
    DefaultValue = ... # type: int
    Key = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def initialSpaces(self) -> bool: ...
    def setInitialSpaces(self, enable: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerPython(QsciLexer):

    class IndentationWarning(int): ...
    NoWarning = ... # type: 'QsciLexerPython.IndentationWarning'
    Inconsistent = ... # type: 'QsciLexerPython.IndentationWarning'
    TabsAfterSpaces = ... # type: 'QsciLexerPython.IndentationWarning'
    Spaces = ... # type: 'QsciLexerPython.IndentationWarning'
    Tabs = ... # type: 'QsciLexerPython.IndentationWarning'

    Default = ... # type: int
    Comment = ... # type: int
    Number = ... # type: int
    DoubleQuotedString = ... # type: int
    SingleQuotedString = ... # type: int
    Keyword = ... # type: int
    TripleSingleQuotedString = ... # type: int
    TripleDoubleQuotedString = ... # type: int
    ClassName = ... # type: int
    FunctionMethodName = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    CommentBlock = ... # type: int
    UnclosedString = ... # type: int
    HighlightedIdentifier = ... # type: int
    Decorator = ... # type: int
    DoubleQuotedFString = ... # type: int
    SingleQuotedFString = ... # type: int
    TripleSingleQuotedFString = ... # type: int
    TripleDoubleQuotedFString = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setIndentationWarning(self, warn: 'QsciLexerPython.IndentationWarning') -> None: ...
    def setFoldQuotes(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def v3BytesAllowed(self) -> bool: ...
    def setV3BytesAllowed(self, allowed: bool) -> None: ...
    def v3BinaryOctalAllowed(self) -> bool: ...
    def setV3BinaryOctalAllowed(self, allowed: bool) -> None: ...
    def v2UnicodeAllowed(self) -> bool: ...
    def setV2UnicodeAllowed(self, allowed: bool) -> None: ...
    def stringsOverNewlineAllowed(self) -> bool: ...
    def setStringsOverNewlineAllowed(self, allowed: bool) -> None: ...
    def highlightSubidentifiers(self) -> bool: ...
    def setHighlightSubidentifiers(self, enabled: bool) -> None: ...
    def indentationWarning(self) -> 'QsciLexerPython.IndentationWarning': ...
    def foldQuotes(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def indentationGuideView(self) -> int: ...
    def braceStyle(self) -> int: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def blockLookback(self) -> int: ...
    def autoCompletionWordSeparators(self) -> typing.List[str]: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerRuby(QsciLexer):

    Default = ... # type: int
    Error = ... # type: int
    Comment = ... # type: int
    POD = ... # type: int
    Number = ... # type: int
    Keyword = ... # type: int
    DoubleQuotedString = ... # type: int
    SingleQuotedString = ... # type: int
    ClassName = ... # type: int
    FunctionMethodName = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    Regex = ... # type: int
    Global = ... # type: int
    Symbol = ... # type: int
    ModuleName = ... # type: int
    InstanceVariable = ... # type: int
    ClassVariable = ... # type: int
    Backticks = ... # type: int
    DataSection = ... # type: int
    HereDocumentDelimiter = ... # type: int
    HereDocument = ... # type: int
    PercentStringq = ... # type: int
    PercentStringQ = ... # type: int
    PercentStringx = ... # type: int
    PercentStringr = ... # type: int
    PercentStringw = ... # type: int
    DemotedKeyword = ... # type: int
    Stdin = ... # type: int
    Stdout = ... # type: int
    Stderr = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> typing.Tuple[str, int]: ...
    def blockStart(self) -> typing.Tuple[str, int]: ...
    def blockEnd(self) -> typing.Tuple[str, int]: ...
    def description(self, style: int) -> str: ...
    def keywords(self, a0: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerSpice(QsciLexer):

    Default = ... # type: int
    Identifier = ... # type: int
    Command = ... # type: int
    Function = ... # type: int
    Parameter = ... # type: int
    Number = ... # type: int
    Delimiter = ... # type: int
    Value = ... # type: int
    Comment = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def keywords(self, set: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerSQL(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    CommentLine = ... # type: int
    CommentDoc = ... # type: int
    Number = ... # type: int
    Keyword = ... # type: int
    DoubleQuotedString = ... # type: int
    SingleQuotedString = ... # type: int
    PlusKeyword = ... # type: int
    PlusPrompt = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    PlusComment = ... # type: int
    CommentLineHash = ... # type: int
    CommentDocKeyword = ... # type: int
    CommentDocKeywordError = ... # type: int
    KeywordSet5 = ... # type: int
    KeywordSet6 = ... # type: int
    KeywordSet7 = ... # type: int
    KeywordSet8 = ... # type: int
    QuotedIdentifier = ... # type: int
    QuotedOperator = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def setBackslashEscapes(self, enable: bool) -> None: ...
    def quotedIdentifiers(self) -> bool: ...
    def setQuotedIdentifiers(self, enable: bool) -> None: ...
    def hashComments(self) -> bool: ...
    def setHashComments(self, enable: bool) -> None: ...
    def foldOnlyBegin(self) -> bool: ...
    def setFoldOnlyBegin(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def foldAtElse(self) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def dottedWords(self) -> bool: ...
    def setDottedWords(self, enable: bool) -> None: ...
    def backslashEscapes(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerTCL(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    CommentLine = ... # type: int
    Number = ... # type: int
    QuotedKeyword = ... # type: int
    QuotedString = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    Substitution = ... # type: int
    SubstitutionBrace = ... # type: int
    Modifier = ... # type: int
    ExpandKeyword = ... # type: int
    TCLKeyword = ... # type: int
    TkKeyword = ... # type: int
    ITCLKeyword = ... # type: int
    TkCommand = ... # type: int
    KeywordSet6 = ... # type: int
    KeywordSet7 = ... # type: int
    KeywordSet8 = ... # type: int
    KeywordSet9 = ... # type: int
    CommentBox = ... # type: int
    CommentBlock = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def foldComments(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerTeX(QsciLexer):

    Default = ... # type: int
    Special = ... # type: int
    Group = ... # type: int
    Symbol = ... # type: int
    Command = ... # type: int
    Text = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def processIf(self) -> bool: ...
    def setProcessIf(self, enable: bool) -> None: ...
    def processComments(self) -> bool: ...
    def setProcessComments(self, enable: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerVerilog(QsciLexer):

    Default = ... # type: int
    InactiveDefault = ... # type: int
    Comment = ... # type: int
    InactiveComment = ... # type: int
    CommentLine = ... # type: int
    InactiveCommentLine = ... # type: int
    CommentBang = ... # type: int
    InactiveCommentBang = ... # type: int
    Number = ... # type: int
    InactiveNumber = ... # type: int
    Keyword = ... # type: int
    InactiveKeyword = ... # type: int
    String = ... # type: int
    InactiveString = ... # type: int
    KeywordSet2 = ... # type: int
    InactiveKeywordSet2 = ... # type: int
    SystemTask = ... # type: int
    InactiveSystemTask = ... # type: int
    Preprocessor = ... # type: int
    InactivePreprocessor = ... # type: int
    Operator = ... # type: int
    InactiveOperator = ... # type: int
    Identifier = ... # type: int
    InactiveIdentifier = ... # type: int
    UnclosedString = ... # type: int
    InactiveUnclosedString = ... # type: int
    UserKeywordSet = ... # type: int
    InactiveUserKeywordSet = ... # type: int
    CommentKeyword = ... # type: int
    InactiveCommentKeyword = ... # type: int
    DeclareInputPort = ... # type: int
    InactiveDeclareInputPort = ... # type: int
    DeclareOutputPort = ... # type: int
    InactiveDeclareOutputPort = ... # type: int
    DeclareInputOutputPort = ... # type: int
    InactiveDeclareInputOutputPort = ... # type: int
    PortConnection = ... # type: int
    InactivePortConnection = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def foldAtModule(self) -> bool: ...
    def setFoldAtModule(self, fold: bool) -> None: ...
    def foldPreprocessor(self) -> bool: ...
    def setFoldPreprocessor(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldAtElse(self) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerVHDL(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    CommentLine = ... # type: int
    Number = ... # type: int
    String = ... # type: int
    Operator = ... # type: int
    Identifier = ... # type: int
    UnclosedString = ... # type: int
    Keyword = ... # type: int
    StandardOperator = ... # type: int
    Attribute = ... # type: int
    StandardFunction = ... # type: int
    StandardPackage = ... # type: int
    StandardType = ... # type: int
    KeywordSet7 = ... # type: int
    CommentBlock = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldAtParenthesis(self, fold: bool) -> None: ...
    def setFoldAtBegin(self, fold: bool) -> None: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldAtParenthesis(self) -> bool: ...
    def foldAtBegin(self) -> bool: ...
    def foldAtElse(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerXML(QsciLexerHTML):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def scriptsStyled(self) -> bool: ...
    def setScriptsStyled(self, styled: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciLexerYAML(QsciLexer):

    Default = ... # type: int
    Comment = ... # type: int
    Identifier = ... # type: int
    Keyword = ... # type: int
    Number = ... # type: int
    Reference = ... # type: int
    DocumentDelimiter = ... # type: int
    TextBlockMarker = ... # type: int
    SyntaxErrorMarker = ... # type: int
    Operator = ... # type: int

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...


class QsciMacro(QtCore.QObject):

    @typing.overload
    def __init__(self, parent: QsciScintilla) -> None: ...
    @typing.overload
    def __init__(self, asc: str, parent: QsciScintilla) -> None: ...

    def endRecording(self) -> None: ...
    def startRecording(self) -> None: ...
    def play(self) -> None: ...
    def save(self) -> str: ...
    def load(self, asc: str) -> bool: ...
    def clear(self) -> None: ...


class QsciPrinter(QtPrintSupport.QPrinter):

    def __init__(self, mode: QtPrintSupport.QPrinter.PrinterMode = ...) -> None: ...

    def setWrapMode(self, a0: QsciScintilla.WrapMode) -> None: ...
    def wrapMode(self) -> QsciScintilla.WrapMode: ...
    def printRange(self, qsb: QsciScintillaBase, from_: int = ..., to: int = ...) -> int: ...
    def setMagnification(self, magnification: int) -> None: ...
    def magnification(self) -> int: ...
    def formatPage(self, painter: QtGui.QPainter, drawing: bool, area: QtCore.QRect, pagenr: int) -> None: ...


class QsciStyle(sip.wrapper):

    class TextCase(int): ...
    OriginalCase = ... # type: 'QsciStyle.TextCase'
    UpperCase = ... # type: 'QsciStyle.TextCase'
    LowerCase = ... # type: 'QsciStyle.TextCase'

    @typing.overload
    def __init__(self, style: int = ...) -> None: ...
    @typing.overload
    def __init__(self, style: int, description: str, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], paper: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor], font: QtGui.QFont, eolFill: bool = ...) -> None: ...
    @typing.overload
    def __init__(self, a0: 'QsciStyle') -> None: ...

    def refresh(self) -> None: ...
    def hotspot(self) -> bool: ...
    def setHotspot(self, hotspot: bool) -> None: ...
    def changeable(self) -> bool: ...
    def setChangeable(self, changeable: bool) -> None: ...
    def visible(self) -> bool: ...
    def setVisible(self, visible: bool) -> None: ...
    def textCase(self) -> 'QsciStyle.TextCase': ...
    def setTextCase(self, text_case: 'QsciStyle.TextCase') -> None: ...
    def eolFill(self) -> bool: ...
    def setEolFill(self, fill: bool) -> None: ...
    def font(self) -> QtGui.QFont: ...
    def setFont(self, font: QtGui.QFont) -> None: ...
    def paper(self) -> QtGui.QColor: ...
    def setPaper(self, paper: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def color(self) -> QtGui.QColor: ...
    def setColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
    def description(self) -> str: ...
    def setDescription(self, description: str) -> None: ...
    def style(self) -> int: ...
    def setStyle(self, style: int) -> None: ...


class QsciStyledText(sip.wrapper):

    @typing.overload
    def __init__(self, text: str, style: int) -> None: ...
    @typing.overload
    def __init__(self, text: str, style: QsciStyle) -> None: ...
    @typing.overload
    def __init__(self, a0: 'QsciStyledText') -> None: ...

    def style(self) -> int: ...
    def text(self) -> str: ...


QSCINTILLA_VERSION = ... # type: int
QSCINTILLA_VERSION_STR = ... # type: str
